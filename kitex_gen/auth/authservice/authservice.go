// Code generated by Kitex v0.11.3. DO NOT EDIT.

package authservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	auth "gomall/kitex_gen/auth"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"LoginByCode": kitex.NewMethodInfo(
		loginByCodeHandler,
		newLoginByCodeArgs,
		newLoginByCodeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"LoginByPwd": kitex.NewMethodInfo(
		loginByPwdHandler,
		newLoginByPwdArgs,
		newLoginByPwdResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Register": kitex.NewMethodInfo(
		registerHandler,
		newRegisterArgs,
		newRegisterResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SendPhoneCode": kitex.NewMethodInfo(
		sendPhoneCodeHandler,
		newSendPhoneCodeArgs,
		newSendPhoneCodeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SendEmailCode": kitex.NewMethodInfo(
		sendEmailCodeHandler,
		newSendEmailCodeArgs,
		newSendEmailCodeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ShowPhotoCaptcha": kitex.NewMethodInfo(
		showPhotoCaptchaHandler,
		newShowPhotoCaptchaArgs,
		newShowPhotoCaptchaResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"RefreshToken": kitex.NewMethodInfo(
		refreshTokenHandler,
		newRefreshTokenArgs,
		newRefreshTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetUserAdmin": kitex.NewMethodInfo(
		getUserAdminHandler,
		newGetUserAdminArgs,
		newGetUserAdminResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ModifyUserToSeller": kitex.NewMethodInfo(
		modifyUserToSellerHandler,
		newModifyUserToSellerArgs,
		newModifyUserToSellerResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	authServiceServiceInfo                = NewServiceInfo()
	authServiceServiceInfoForClient       = NewServiceInfoForClient()
	authServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return authServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return authServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return authServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "AuthService"
	handlerType := (*auth.AuthService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func loginByCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.LoginByCodeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.AuthService).LoginByCode(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *LoginByCodeArgs:
		success, err := handler.(auth.AuthService).LoginByCode(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LoginByCodeResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newLoginByCodeArgs() interface{} {
	return &LoginByCodeArgs{}
}

func newLoginByCodeResult() interface{} {
	return &LoginByCodeResult{}
}

type LoginByCodeArgs struct {
	Req *auth.LoginByCodeReq
}

func (p *LoginByCodeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.LoginByCodeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LoginByCodeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LoginByCodeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LoginByCodeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *LoginByCodeArgs) Unmarshal(in []byte) error {
	msg := new(auth.LoginByCodeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LoginByCodeArgs_Req_DEFAULT *auth.LoginByCodeReq

func (p *LoginByCodeArgs) GetReq() *auth.LoginByCodeReq {
	if !p.IsSetReq() {
		return LoginByCodeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LoginByCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LoginByCodeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type LoginByCodeResult struct {
	Success *auth.LoginByCodeResp
}

var LoginByCodeResult_Success_DEFAULT *auth.LoginByCodeResp

func (p *LoginByCodeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.LoginByCodeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LoginByCodeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LoginByCodeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LoginByCodeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *LoginByCodeResult) Unmarshal(in []byte) error {
	msg := new(auth.LoginByCodeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LoginByCodeResult) GetSuccess() *auth.LoginByCodeResp {
	if !p.IsSetSuccess() {
		return LoginByCodeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LoginByCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.LoginByCodeResp)
}

func (p *LoginByCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LoginByCodeResult) GetResult() interface{} {
	return p.Success
}

func loginByPwdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.LoginByPwdReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.AuthService).LoginByPwd(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *LoginByPwdArgs:
		success, err := handler.(auth.AuthService).LoginByPwd(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LoginByPwdResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newLoginByPwdArgs() interface{} {
	return &LoginByPwdArgs{}
}

func newLoginByPwdResult() interface{} {
	return &LoginByPwdResult{}
}

type LoginByPwdArgs struct {
	Req *auth.LoginByPwdReq
}

func (p *LoginByPwdArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.LoginByPwdReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LoginByPwdArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LoginByPwdArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LoginByPwdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *LoginByPwdArgs) Unmarshal(in []byte) error {
	msg := new(auth.LoginByPwdReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LoginByPwdArgs_Req_DEFAULT *auth.LoginByPwdReq

func (p *LoginByPwdArgs) GetReq() *auth.LoginByPwdReq {
	if !p.IsSetReq() {
		return LoginByPwdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LoginByPwdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LoginByPwdArgs) GetFirstArgument() interface{} {
	return p.Req
}

type LoginByPwdResult struct {
	Success *auth.LoginByPwdResp
}

var LoginByPwdResult_Success_DEFAULT *auth.LoginByPwdResp

func (p *LoginByPwdResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.LoginByPwdResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LoginByPwdResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LoginByPwdResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LoginByPwdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *LoginByPwdResult) Unmarshal(in []byte) error {
	msg := new(auth.LoginByPwdResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LoginByPwdResult) GetSuccess() *auth.LoginByPwdResp {
	if !p.IsSetSuccess() {
		return LoginByPwdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LoginByPwdResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.LoginByPwdResp)
}

func (p *LoginByPwdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LoginByPwdResult) GetResult() interface{} {
	return p.Success
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.RegisterReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.AuthService).Register(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RegisterArgs:
		success, err := handler.(auth.AuthService).Register(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RegisterResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRegisterArgs() interface{} {
	return &RegisterArgs{}
}

func newRegisterResult() interface{} {
	return &RegisterResult{}
}

type RegisterArgs struct {
	Req *auth.RegisterReq
}

func (p *RegisterArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.RegisterReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RegisterArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RegisterArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RegisterArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RegisterArgs) Unmarshal(in []byte) error {
	msg := new(auth.RegisterReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RegisterArgs_Req_DEFAULT *auth.RegisterReq

func (p *RegisterArgs) GetReq() *auth.RegisterReq {
	if !p.IsSetReq() {
		return RegisterArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RegisterArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RegisterResult struct {
	Success *auth.RegisterResp
}

var RegisterResult_Success_DEFAULT *auth.RegisterResp

func (p *RegisterResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.RegisterResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RegisterResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RegisterResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RegisterResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RegisterResult) Unmarshal(in []byte) error {
	msg := new(auth.RegisterResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RegisterResult) GetSuccess() *auth.RegisterResp {
	if !p.IsSetSuccess() {
		return RegisterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.RegisterResp)
}

func (p *RegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegisterResult) GetResult() interface{} {
	return p.Success
}

func sendPhoneCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.SendPhoneCodeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.AuthService).SendPhoneCode(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SendPhoneCodeArgs:
		success, err := handler.(auth.AuthService).SendPhoneCode(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SendPhoneCodeResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSendPhoneCodeArgs() interface{} {
	return &SendPhoneCodeArgs{}
}

func newSendPhoneCodeResult() interface{} {
	return &SendPhoneCodeResult{}
}

type SendPhoneCodeArgs struct {
	Req *auth.SendPhoneCodeReq
}

func (p *SendPhoneCodeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.SendPhoneCodeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SendPhoneCodeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SendPhoneCodeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SendPhoneCodeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SendPhoneCodeArgs) Unmarshal(in []byte) error {
	msg := new(auth.SendPhoneCodeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SendPhoneCodeArgs_Req_DEFAULT *auth.SendPhoneCodeReq

func (p *SendPhoneCodeArgs) GetReq() *auth.SendPhoneCodeReq {
	if !p.IsSetReq() {
		return SendPhoneCodeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SendPhoneCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SendPhoneCodeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SendPhoneCodeResult struct {
	Success *auth.SendPhoneCodeResp
}

var SendPhoneCodeResult_Success_DEFAULT *auth.SendPhoneCodeResp

func (p *SendPhoneCodeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.SendPhoneCodeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SendPhoneCodeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SendPhoneCodeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SendPhoneCodeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SendPhoneCodeResult) Unmarshal(in []byte) error {
	msg := new(auth.SendPhoneCodeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SendPhoneCodeResult) GetSuccess() *auth.SendPhoneCodeResp {
	if !p.IsSetSuccess() {
		return SendPhoneCodeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SendPhoneCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.SendPhoneCodeResp)
}

func (p *SendPhoneCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendPhoneCodeResult) GetResult() interface{} {
	return p.Success
}

func sendEmailCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.SendEmailCodeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.AuthService).SendEmailCode(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SendEmailCodeArgs:
		success, err := handler.(auth.AuthService).SendEmailCode(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SendEmailCodeResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSendEmailCodeArgs() interface{} {
	return &SendEmailCodeArgs{}
}

func newSendEmailCodeResult() interface{} {
	return &SendEmailCodeResult{}
}

type SendEmailCodeArgs struct {
	Req *auth.SendEmailCodeReq
}

func (p *SendEmailCodeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.SendEmailCodeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SendEmailCodeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SendEmailCodeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SendEmailCodeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SendEmailCodeArgs) Unmarshal(in []byte) error {
	msg := new(auth.SendEmailCodeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SendEmailCodeArgs_Req_DEFAULT *auth.SendEmailCodeReq

func (p *SendEmailCodeArgs) GetReq() *auth.SendEmailCodeReq {
	if !p.IsSetReq() {
		return SendEmailCodeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SendEmailCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SendEmailCodeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SendEmailCodeResult struct {
	Success *auth.SendEmailCodeResp
}

var SendEmailCodeResult_Success_DEFAULT *auth.SendEmailCodeResp

func (p *SendEmailCodeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.SendEmailCodeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SendEmailCodeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SendEmailCodeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SendEmailCodeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SendEmailCodeResult) Unmarshal(in []byte) error {
	msg := new(auth.SendEmailCodeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SendEmailCodeResult) GetSuccess() *auth.SendEmailCodeResp {
	if !p.IsSetSuccess() {
		return SendEmailCodeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SendEmailCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.SendEmailCodeResp)
}

func (p *SendEmailCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendEmailCodeResult) GetResult() interface{} {
	return p.Success
}

func showPhotoCaptchaHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.ShowPhotoCaptchaReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.AuthService).ShowPhotoCaptcha(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ShowPhotoCaptchaArgs:
		success, err := handler.(auth.AuthService).ShowPhotoCaptcha(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ShowPhotoCaptchaResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newShowPhotoCaptchaArgs() interface{} {
	return &ShowPhotoCaptchaArgs{}
}

func newShowPhotoCaptchaResult() interface{} {
	return &ShowPhotoCaptchaResult{}
}

type ShowPhotoCaptchaArgs struct {
	Req *auth.ShowPhotoCaptchaReq
}

func (p *ShowPhotoCaptchaArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.ShowPhotoCaptchaReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ShowPhotoCaptchaArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ShowPhotoCaptchaArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ShowPhotoCaptchaArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ShowPhotoCaptchaArgs) Unmarshal(in []byte) error {
	msg := new(auth.ShowPhotoCaptchaReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ShowPhotoCaptchaArgs_Req_DEFAULT *auth.ShowPhotoCaptchaReq

func (p *ShowPhotoCaptchaArgs) GetReq() *auth.ShowPhotoCaptchaReq {
	if !p.IsSetReq() {
		return ShowPhotoCaptchaArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ShowPhotoCaptchaArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ShowPhotoCaptchaArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ShowPhotoCaptchaResult struct {
	Success *auth.ShowPhotoCaptchaResp
}

var ShowPhotoCaptchaResult_Success_DEFAULT *auth.ShowPhotoCaptchaResp

func (p *ShowPhotoCaptchaResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.ShowPhotoCaptchaResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ShowPhotoCaptchaResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ShowPhotoCaptchaResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ShowPhotoCaptchaResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ShowPhotoCaptchaResult) Unmarshal(in []byte) error {
	msg := new(auth.ShowPhotoCaptchaResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ShowPhotoCaptchaResult) GetSuccess() *auth.ShowPhotoCaptchaResp {
	if !p.IsSetSuccess() {
		return ShowPhotoCaptchaResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ShowPhotoCaptchaResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.ShowPhotoCaptchaResp)
}

func (p *ShowPhotoCaptchaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ShowPhotoCaptchaResult) GetResult() interface{} {
	return p.Success
}

func refreshTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.RefreshTokenReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.AuthService).RefreshToken(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RefreshTokenArgs:
		success, err := handler.(auth.AuthService).RefreshToken(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RefreshTokenResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRefreshTokenArgs() interface{} {
	return &RefreshTokenArgs{}
}

func newRefreshTokenResult() interface{} {
	return &RefreshTokenResult{}
}

type RefreshTokenArgs struct {
	Req *auth.RefreshTokenReq
}

func (p *RefreshTokenArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.RefreshTokenReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RefreshTokenArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RefreshTokenArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RefreshTokenArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RefreshTokenArgs) Unmarshal(in []byte) error {
	msg := new(auth.RefreshTokenReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RefreshTokenArgs_Req_DEFAULT *auth.RefreshTokenReq

func (p *RefreshTokenArgs) GetReq() *auth.RefreshTokenReq {
	if !p.IsSetReq() {
		return RefreshTokenArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RefreshTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RefreshTokenArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RefreshTokenResult struct {
	Success *auth.RefreshTokenResp
}

var RefreshTokenResult_Success_DEFAULT *auth.RefreshTokenResp

func (p *RefreshTokenResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.RefreshTokenResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RefreshTokenResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RefreshTokenResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RefreshTokenResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RefreshTokenResult) Unmarshal(in []byte) error {
	msg := new(auth.RefreshTokenResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RefreshTokenResult) GetSuccess() *auth.RefreshTokenResp {
	if !p.IsSetSuccess() {
		return RefreshTokenResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RefreshTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.RefreshTokenResp)
}

func (p *RefreshTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RefreshTokenResult) GetResult() interface{} {
	return p.Success
}

func getUserAdminHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.CheckAdminReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.AuthService).GetUserAdmin(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetUserAdminArgs:
		success, err := handler.(auth.AuthService).GetUserAdmin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserAdminResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetUserAdminArgs() interface{} {
	return &GetUserAdminArgs{}
}

func newGetUserAdminResult() interface{} {
	return &GetUserAdminResult{}
}

type GetUserAdminArgs struct {
	Req *auth.CheckAdminReq
}

func (p *GetUserAdminArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.CheckAdminReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserAdminArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserAdminArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserAdminArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserAdminArgs) Unmarshal(in []byte) error {
	msg := new(auth.CheckAdminReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserAdminArgs_Req_DEFAULT *auth.CheckAdminReq

func (p *GetUserAdminArgs) GetReq() *auth.CheckAdminReq {
	if !p.IsSetReq() {
		return GetUserAdminArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserAdminArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserAdminArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserAdminResult struct {
	Success *auth.CheckAdminResp
}

var GetUserAdminResult_Success_DEFAULT *auth.CheckAdminResp

func (p *GetUserAdminResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.CheckAdminResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserAdminResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserAdminResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserAdminResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserAdminResult) Unmarshal(in []byte) error {
	msg := new(auth.CheckAdminResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserAdminResult) GetSuccess() *auth.CheckAdminResp {
	if !p.IsSetSuccess() {
		return GetUserAdminResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserAdminResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.CheckAdminResp)
}

func (p *GetUserAdminResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserAdminResult) GetResult() interface{} {
	return p.Success
}

func modifyUserToSellerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.ModifyUserToSellerReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.AuthService).ModifyUserToSeller(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ModifyUserToSellerArgs:
		success, err := handler.(auth.AuthService).ModifyUserToSeller(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ModifyUserToSellerResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newModifyUserToSellerArgs() interface{} {
	return &ModifyUserToSellerArgs{}
}

func newModifyUserToSellerResult() interface{} {
	return &ModifyUserToSellerResult{}
}

type ModifyUserToSellerArgs struct {
	Req *auth.ModifyUserToSellerReq
}

func (p *ModifyUserToSellerArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.ModifyUserToSellerReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ModifyUserToSellerArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ModifyUserToSellerArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ModifyUserToSellerArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ModifyUserToSellerArgs) Unmarshal(in []byte) error {
	msg := new(auth.ModifyUserToSellerReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ModifyUserToSellerArgs_Req_DEFAULT *auth.ModifyUserToSellerReq

func (p *ModifyUserToSellerArgs) GetReq() *auth.ModifyUserToSellerReq {
	if !p.IsSetReq() {
		return ModifyUserToSellerArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ModifyUserToSellerArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ModifyUserToSellerArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ModifyUserToSellerResult struct {
	Success *auth.ModifyUserToSellerResp
}

var ModifyUserToSellerResult_Success_DEFAULT *auth.ModifyUserToSellerResp

func (p *ModifyUserToSellerResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.ModifyUserToSellerResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ModifyUserToSellerResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ModifyUserToSellerResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ModifyUserToSellerResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ModifyUserToSellerResult) Unmarshal(in []byte) error {
	msg := new(auth.ModifyUserToSellerResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ModifyUserToSellerResult) GetSuccess() *auth.ModifyUserToSellerResp {
	if !p.IsSetSuccess() {
		return ModifyUserToSellerResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ModifyUserToSellerResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.ModifyUserToSellerResp)
}

func (p *ModifyUserToSellerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ModifyUserToSellerResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) LoginByCode(ctx context.Context, Req *auth.LoginByCodeReq) (r *auth.LoginByCodeResp, err error) {
	var _args LoginByCodeArgs
	_args.Req = Req
	var _result LoginByCodeResult
	if err = p.c.Call(ctx, "LoginByCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LoginByPwd(ctx context.Context, Req *auth.LoginByPwdReq) (r *auth.LoginByPwdResp, err error) {
	var _args LoginByPwdArgs
	_args.Req = Req
	var _result LoginByPwdResult
	if err = p.c.Call(ctx, "LoginByPwd", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Register(ctx context.Context, Req *auth.RegisterReq) (r *auth.RegisterResp, err error) {
	var _args RegisterArgs
	_args.Req = Req
	var _result RegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendPhoneCode(ctx context.Context, Req *auth.SendPhoneCodeReq) (r *auth.SendPhoneCodeResp, err error) {
	var _args SendPhoneCodeArgs
	_args.Req = Req
	var _result SendPhoneCodeResult
	if err = p.c.Call(ctx, "SendPhoneCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendEmailCode(ctx context.Context, Req *auth.SendEmailCodeReq) (r *auth.SendEmailCodeResp, err error) {
	var _args SendEmailCodeArgs
	_args.Req = Req
	var _result SendEmailCodeResult
	if err = p.c.Call(ctx, "SendEmailCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ShowPhotoCaptcha(ctx context.Context, Req *auth.ShowPhotoCaptchaReq) (r *auth.ShowPhotoCaptchaResp, err error) {
	var _args ShowPhotoCaptchaArgs
	_args.Req = Req
	var _result ShowPhotoCaptchaResult
	if err = p.c.Call(ctx, "ShowPhotoCaptcha", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RefreshToken(ctx context.Context, Req *auth.RefreshTokenReq) (r *auth.RefreshTokenResp, err error) {
	var _args RefreshTokenArgs
	_args.Req = Req
	var _result RefreshTokenResult
	if err = p.c.Call(ctx, "RefreshToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserAdmin(ctx context.Context, Req *auth.CheckAdminReq) (r *auth.CheckAdminResp, err error) {
	var _args GetUserAdminArgs
	_args.Req = Req
	var _result GetUserAdminResult
	if err = p.c.Call(ctx, "GetUserAdmin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ModifyUserToSeller(ctx context.Context, Req *auth.ModifyUserToSellerReq) (r *auth.ModifyUserToSellerResp, err error) {
	var _args ModifyUserToSellerArgs
	_args.Req = Req
	var _result ModifyUserToSellerResult
	if err = p.c.Call(ctx, "ModifyUserToSeller", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
