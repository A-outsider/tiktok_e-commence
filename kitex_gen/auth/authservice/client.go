// Code generated by Kitex v0.10.3. DO NOT EDIT.

package authservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	auth "gomall/kitex_gen/auth"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	LoginByCode(ctx context.Context, Req *auth.LoginByCodeReq, callOptions ...callopt.Option) (r *auth.LoginByCodeResp, err error)
	LoginByPwd(ctx context.Context, Req *auth.LoginByPwdReq, callOptions ...callopt.Option) (r *auth.LoginByPwdResp, err error)
	Register(ctx context.Context, Req *auth.RegisterReq, callOptions ...callopt.Option) (r *auth.RegisterResp, err error)
	SendPhoneCode(ctx context.Context, Req *auth.SendPhoneCodeReq, callOptions ...callopt.Option) (r *auth.SendPhoneCodeResp, err error)
	SendEmailCode(ctx context.Context, Req *auth.SendEmailCodeReq, callOptions ...callopt.Option) (r *auth.SendEmailCodeResp, err error)
	ShowPhotoCaptcha(ctx context.Context, Req *auth.ShowPhotoCaptchaReq, callOptions ...callopt.Option) (r *auth.ShowPhotoCaptchaResp, err error)
	RefreshToken(ctx context.Context, Req *auth.RefreshTokenReq, callOptions ...callopt.Option) (r *auth.RefreshTokenResp, err error)
	GetUserAdmin(ctx context.Context, Req *auth.CheckAdminReq, callOptions ...callopt.Option) (r *auth.CheckAdminResp, err error)
	ModifyUserToSeller(ctx context.Context, Req *auth.ModifyUserToSellerReq, callOptions ...callopt.Option) (r *auth.ModifyUserToSellerResp, err error)
	GetRSAKey(ctx context.Context, Req *auth.GetRSAKeyReq, callOptions ...callopt.Option) (r *auth.GetRSAKeyResp, err error)
	SetAESKey(ctx context.Context, Req *auth.SetAESKeyReq, callOptions ...callopt.Option) (r *auth.SetAESKeyResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kAuthServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kAuthServiceClient struct {
	*kClient
}

func (p *kAuthServiceClient) LoginByCode(ctx context.Context, Req *auth.LoginByCodeReq, callOptions ...callopt.Option) (r *auth.LoginByCodeResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.LoginByCode(ctx, Req)
}

func (p *kAuthServiceClient) LoginByPwd(ctx context.Context, Req *auth.LoginByPwdReq, callOptions ...callopt.Option) (r *auth.LoginByPwdResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.LoginByPwd(ctx, Req)
}

func (p *kAuthServiceClient) Register(ctx context.Context, Req *auth.RegisterReq, callOptions ...callopt.Option) (r *auth.RegisterResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Register(ctx, Req)
}

func (p *kAuthServiceClient) SendPhoneCode(ctx context.Context, Req *auth.SendPhoneCodeReq, callOptions ...callopt.Option) (r *auth.SendPhoneCodeResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SendPhoneCode(ctx, Req)
}

func (p *kAuthServiceClient) SendEmailCode(ctx context.Context, Req *auth.SendEmailCodeReq, callOptions ...callopt.Option) (r *auth.SendEmailCodeResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SendEmailCode(ctx, Req)
}

func (p *kAuthServiceClient) ShowPhotoCaptcha(ctx context.Context, Req *auth.ShowPhotoCaptchaReq, callOptions ...callopt.Option) (r *auth.ShowPhotoCaptchaResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ShowPhotoCaptcha(ctx, Req)
}

func (p *kAuthServiceClient) RefreshToken(ctx context.Context, Req *auth.RefreshTokenReq, callOptions ...callopt.Option) (r *auth.RefreshTokenResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RefreshToken(ctx, Req)
}

func (p *kAuthServiceClient) GetUserAdmin(ctx context.Context, Req *auth.CheckAdminReq, callOptions ...callopt.Option) (r *auth.CheckAdminResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserAdmin(ctx, Req)
}

func (p *kAuthServiceClient) ModifyUserToSeller(ctx context.Context, Req *auth.ModifyUserToSellerReq, callOptions ...callopt.Option) (r *auth.ModifyUserToSellerResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ModifyUserToSeller(ctx, Req)
}

func (p *kAuthServiceClient) GetRSAKey(ctx context.Context, Req *auth.GetRSAKeyReq, callOptions ...callopt.Option) (r *auth.GetRSAKeyResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetRSAKey(ctx, Req)
}

func (p *kAuthServiceClient) SetAESKey(ctx context.Context, Req *auth.SetAESKeyReq, callOptions ...callopt.Option) (r *auth.SetAESKeyResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SetAESKey(ctx, Req)
}
