// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package rpcOrder

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	cart "gomall/kitex_gen/cart"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Address) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Address[number], err)
}

func (x *Address) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Address, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Address) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Phone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Address) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PlaceOrderReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PlaceOrderReq[number], err)
}

func (x *PlaceOrderReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PlaceOrderReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserCurrency, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PlaceOrderReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v Address
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Address = &v
	return offset, nil
}

func (x *PlaceOrderReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v OrderItem
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.OrderItems = append(x.OrderItems, &v)
	return offset, nil
}

func (x *OrderItem) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_OrderItem[number], err)
}

func (x *OrderItem) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v cart.CartItem
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Item = &v
	return offset, nil
}

func (x *OrderItem) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Cost, offset, err = fastpb.ReadFloat(buf, _type)
	return offset, err
}

func (x *OrderResult) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_OrderResult[number], err)
}

func (x *OrderResult) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *OrderResult) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Cost, offset, err = fastpb.ReadFloat(buf, _type)
	return offset, err
}

func (x *PlaceOrderResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PlaceOrderResp[number], err)
}

func (x *PlaceOrderResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v OrderResult
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Order = &v
	return offset, nil
}

func (x *PlaceOrderResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListOrderReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListOrderReq[number], err)
}

func (x *ListOrderReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Order) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Order[number], err)
}

func (x *Order) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Oid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Order) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Order) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.UserCurrency, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Order) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Order) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Phone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Order) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Address, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Order) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Pid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Order) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Quantity, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Order) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Cost, offset, err = fastpb.ReadFloat(buf, _type)
	return offset, err
}

func (x *Order) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Order) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.CreatedAt, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ListOrderResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListOrderResp[number], err)
}

func (x *ListOrderResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Order
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Orders = append(x.Orders, &v)
	return offset, nil
}

func (x *ListOrderResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *MarkOrderPaidReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MarkOrderPaidReq[number], err)
}

func (x *MarkOrderPaidReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MarkOrderPaidReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MarkOrderPaidResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MarkOrderPaidResp[number], err)
}

func (x *MarkOrderPaidResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *MakeSureOrderExpiredReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MakeSureOrderExpiredReq[number], err)
}

func (x *MakeSureOrderExpiredReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.PayId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MakeSureOrderExpiredResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MakeSureOrderExpiredResp[number], err)
}

func (x *MakeSureOrderExpiredResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.IsExpired, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *MakeSureOrderExpiredResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *MarkOrderShippedReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MarkOrderShippedReq[number], err)
}

func (x *MarkOrderShippedReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MarkOrderShippedReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MarkOrderShippedResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MarkOrderShippedResp[number], err)
}

func (x *MarkOrderShippedResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *MarkOrderCompletedReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MarkOrderCompletedReq[number], err)
}

func (x *MarkOrderCompletedReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MarkOrderCompletedReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MarkOrderCompletedResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MarkOrderCompletedResp[number], err)
}

func (x *MarkOrderCompletedResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListOrderFromSellerReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListOrderFromSellerReq[number], err)
}

func (x *ListOrderFromSellerReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.SellerId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListOrderFromSellerResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListOrderFromSellerResp[number], err)
}

func (x *ListOrderFromSellerResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Order
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Orders = append(x.Orders, &v)
	return offset, nil
}

func (x *ListOrderFromSellerResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Address) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *Address) fastWriteField1(buf []byte) (offset int) {
	if x.Address == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAddress())
	return offset
}

func (x *Address) fastWriteField2(buf []byte) (offset int) {
	if x.Phone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPhone())
	return offset
}

func (x *Address) fastWriteField3(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *PlaceOrderReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *PlaceOrderReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *PlaceOrderReq) fastWriteField2(buf []byte) (offset int) {
	if x.UserCurrency == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserCurrency())
	return offset
}

func (x *PlaceOrderReq) fastWriteField3(buf []byte) (offset int) {
	if x.Address == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetAddress())
	return offset
}

func (x *PlaceOrderReq) fastWriteField4(buf []byte) (offset int) {
	if x.OrderItems == nil {
		return offset
	}
	for i := range x.GetOrderItems() {
		offset += fastpb.WriteMessage(buf[offset:], 4, x.GetOrderItems()[i])
	}
	return offset
}

func (x *OrderItem) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *OrderItem) fastWriteField1(buf []byte) (offset int) {
	if x.Item == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetItem())
	return offset
}

func (x *OrderItem) fastWriteField2(buf []byte) (offset int) {
	if x.Cost == 0 {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 2, x.GetCost())
	return offset
}

func (x *OrderResult) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *OrderResult) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *OrderResult) fastWriteField2(buf []byte) (offset int) {
	if x.Cost == 0 {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 2, x.GetCost())
	return offset
}

func (x *PlaceOrderResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *PlaceOrderResp) fastWriteField1(buf []byte) (offset int) {
	if x.Order == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetOrder())
	return offset
}

func (x *PlaceOrderResp) fastWriteField2(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetStatusCode())
	return offset
}

func (x *ListOrderReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ListOrderReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *Order) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	return offset
}

func (x *Order) fastWriteField1(buf []byte) (offset int) {
	if x.Oid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOid())
	return offset
}

func (x *Order) fastWriteField2(buf []byte) (offset int) {
	if x.Uid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUid())
	return offset
}

func (x *Order) fastWriteField3(buf []byte) (offset int) {
	if x.UserCurrency == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetUserCurrency())
	return offset
}

func (x *Order) fastWriteField4(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetName())
	return offset
}

func (x *Order) fastWriteField5(buf []byte) (offset int) {
	if x.Phone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetPhone())
	return offset
}

func (x *Order) fastWriteField6(buf []byte) (offset int) {
	if x.Address == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetAddress())
	return offset
}

func (x *Order) fastWriteField7(buf []byte) (offset int) {
	if x.Pid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetPid())
	return offset
}

func (x *Order) fastWriteField8(buf []byte) (offset int) {
	if x.Quantity == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetQuantity())
	return offset
}

func (x *Order) fastWriteField9(buf []byte) (offset int) {
	if x.Cost == 0 {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 9, x.GetCost())
	return offset
}

func (x *Order) fastWriteField10(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetStatus())
	return offset
}

func (x *Order) fastWriteField11(buf []byte) (offset int) {
	if x.CreatedAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 11, x.GetCreatedAt())
	return offset
}

func (x *ListOrderResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ListOrderResp) fastWriteField1(buf []byte) (offset int) {
	if x.Orders == nil {
		return offset
	}
	for i := range x.GetOrders() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetOrders()[i])
	}
	return offset
}

func (x *ListOrderResp) fastWriteField2(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetStatusCode())
	return offset
}

func (x *MarkOrderPaidReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *MarkOrderPaidReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *MarkOrderPaidReq) fastWriteField2(buf []byte) (offset int) {
	if x.OrderId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOrderId())
	return offset
}

func (x *MarkOrderPaidResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *MarkOrderPaidResp) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *MakeSureOrderExpiredReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *MakeSureOrderExpiredReq) fastWriteField1(buf []byte) (offset int) {
	if x.PayId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPayId())
	return offset
}

func (x *MakeSureOrderExpiredResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *MakeSureOrderExpiredResp) fastWriteField1(buf []byte) (offset int) {
	if !x.IsExpired {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetIsExpired())
	return offset
}

func (x *MakeSureOrderExpiredResp) fastWriteField2(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetStatusCode())
	return offset
}

func (x *MarkOrderShippedReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *MarkOrderShippedReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *MarkOrderShippedReq) fastWriteField2(buf []byte) (offset int) {
	if x.OrderId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOrderId())
	return offset
}

func (x *MarkOrderShippedResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *MarkOrderShippedResp) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *MarkOrderCompletedReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *MarkOrderCompletedReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *MarkOrderCompletedReq) fastWriteField2(buf []byte) (offset int) {
	if x.OrderId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOrderId())
	return offset
}

func (x *MarkOrderCompletedResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *MarkOrderCompletedResp) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *ListOrderFromSellerReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ListOrderFromSellerReq) fastWriteField1(buf []byte) (offset int) {
	if x.SellerId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetSellerId())
	return offset
}

func (x *ListOrderFromSellerResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ListOrderFromSellerResp) fastWriteField1(buf []byte) (offset int) {
	if x.Orders == nil {
		return offset
	}
	for i := range x.GetOrders() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetOrders()[i])
	}
	return offset
}

func (x *ListOrderFromSellerResp) fastWriteField2(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetStatusCode())
	return offset
}

func (x *Address) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *Address) sizeField1() (n int) {
	if x.Address == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAddress())
	return n
}

func (x *Address) sizeField2() (n int) {
	if x.Phone == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetPhone())
	return n
}

func (x *Address) sizeField3() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *PlaceOrderReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *PlaceOrderReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *PlaceOrderReq) sizeField2() (n int) {
	if x.UserCurrency == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserCurrency())
	return n
}

func (x *PlaceOrderReq) sizeField3() (n int) {
	if x.Address == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetAddress())
	return n
}

func (x *PlaceOrderReq) sizeField4() (n int) {
	if x.OrderItems == nil {
		return n
	}
	for i := range x.GetOrderItems() {
		n += fastpb.SizeMessage(4, x.GetOrderItems()[i])
	}
	return n
}

func (x *OrderItem) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *OrderItem) sizeField1() (n int) {
	if x.Item == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetItem())
	return n
}

func (x *OrderItem) sizeField2() (n int) {
	if x.Cost == 0 {
		return n
	}
	n += fastpb.SizeFloat(2, x.GetCost())
	return n
}

func (x *OrderResult) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *OrderResult) sizeField1() (n int) {
	if x.OrderId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetOrderId())
	return n
}

func (x *OrderResult) sizeField2() (n int) {
	if x.Cost == 0 {
		return n
	}
	n += fastpb.SizeFloat(2, x.GetCost())
	return n
}

func (x *PlaceOrderResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *PlaceOrderResp) sizeField1() (n int) {
	if x.Order == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetOrder())
	return n
}

func (x *PlaceOrderResp) sizeField2() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetStatusCode())
	return n
}

func (x *ListOrderReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ListOrderReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *Order) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	return n
}

func (x *Order) sizeField1() (n int) {
	if x.Oid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetOid())
	return n
}

func (x *Order) sizeField2() (n int) {
	if x.Uid == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUid())
	return n
}

func (x *Order) sizeField3() (n int) {
	if x.UserCurrency == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetUserCurrency())
	return n
}

func (x *Order) sizeField4() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetName())
	return n
}

func (x *Order) sizeField5() (n int) {
	if x.Phone == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetPhone())
	return n
}

func (x *Order) sizeField6() (n int) {
	if x.Address == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetAddress())
	return n
}

func (x *Order) sizeField7() (n int) {
	if x.Pid == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetPid())
	return n
}

func (x *Order) sizeField8() (n int) {
	if x.Quantity == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetQuantity())
	return n
}

func (x *Order) sizeField9() (n int) {
	if x.Cost == 0 {
		return n
	}
	n += fastpb.SizeFloat(9, x.GetCost())
	return n
}

func (x *Order) sizeField10() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetStatus())
	return n
}

func (x *Order) sizeField11() (n int) {
	if x.CreatedAt == 0 {
		return n
	}
	n += fastpb.SizeInt32(11, x.GetCreatedAt())
	return n
}

func (x *ListOrderResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ListOrderResp) sizeField1() (n int) {
	if x.Orders == nil {
		return n
	}
	for i := range x.GetOrders() {
		n += fastpb.SizeMessage(1, x.GetOrders()[i])
	}
	return n
}

func (x *ListOrderResp) sizeField2() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetStatusCode())
	return n
}

func (x *MarkOrderPaidReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *MarkOrderPaidReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *MarkOrderPaidReq) sizeField2() (n int) {
	if x.OrderId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetOrderId())
	return n
}

func (x *MarkOrderPaidResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *MarkOrderPaidResp) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *MakeSureOrderExpiredReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *MakeSureOrderExpiredReq) sizeField1() (n int) {
	if x.PayId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPayId())
	return n
}

func (x *MakeSureOrderExpiredResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *MakeSureOrderExpiredResp) sizeField1() (n int) {
	if !x.IsExpired {
		return n
	}
	n += fastpb.SizeBool(1, x.GetIsExpired())
	return n
}

func (x *MakeSureOrderExpiredResp) sizeField2() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetStatusCode())
	return n
}

func (x *MarkOrderShippedReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *MarkOrderShippedReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *MarkOrderShippedReq) sizeField2() (n int) {
	if x.OrderId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetOrderId())
	return n
}

func (x *MarkOrderShippedResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *MarkOrderShippedResp) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *MarkOrderCompletedReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *MarkOrderCompletedReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *MarkOrderCompletedReq) sizeField2() (n int) {
	if x.OrderId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetOrderId())
	return n
}

func (x *MarkOrderCompletedResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *MarkOrderCompletedResp) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *ListOrderFromSellerReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ListOrderFromSellerReq) sizeField1() (n int) {
	if x.SellerId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetSellerId())
	return n
}

func (x *ListOrderFromSellerResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ListOrderFromSellerResp) sizeField1() (n int) {
	if x.Orders == nil {
		return n
	}
	for i := range x.GetOrders() {
		n += fastpb.SizeMessage(1, x.GetOrders()[i])
	}
	return n
}

func (x *ListOrderFromSellerResp) sizeField2() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetStatusCode())
	return n
}

var fieldIDToName_Address = map[int32]string{
	1: "Address",
	2: "Phone",
	3: "Name",
}

var fieldIDToName_PlaceOrderReq = map[int32]string{
	1: "UserId",
	2: "UserCurrency",
	3: "Address",
	4: "OrderItems",
}

var fieldIDToName_OrderItem = map[int32]string{
	1: "Item",
	2: "Cost",
}

var fieldIDToName_OrderResult = map[int32]string{
	1: "OrderId",
	2: "Cost",
}

var fieldIDToName_PlaceOrderResp = map[int32]string{
	1: "Order",
	2: "StatusCode",
}

var fieldIDToName_ListOrderReq = map[int32]string{
	1: "UserId",
}

var fieldIDToName_Order = map[int32]string{
	1:  "Oid",
	2:  "Uid",
	3:  "UserCurrency",
	4:  "Name",
	5:  "Phone",
	6:  "Address",
	7:  "Pid",
	8:  "Quantity",
	9:  "Cost",
	10: "Status",
	11: "CreatedAt",
}

var fieldIDToName_ListOrderResp = map[int32]string{
	1: "Orders",
	2: "StatusCode",
}

var fieldIDToName_MarkOrderPaidReq = map[int32]string{
	1: "UserId",
	2: "OrderId",
}

var fieldIDToName_MarkOrderPaidResp = map[int32]string{
	1: "StatusCode",
}

var fieldIDToName_MakeSureOrderExpiredReq = map[int32]string{
	1: "PayId",
}

var fieldIDToName_MakeSureOrderExpiredResp = map[int32]string{
	1: "IsExpired",
	2: "StatusCode",
}

var fieldIDToName_MarkOrderShippedReq = map[int32]string{
	1: "UserId",
	2: "OrderId",
}

var fieldIDToName_MarkOrderShippedResp = map[int32]string{
	1: "StatusCode",
}

var fieldIDToName_MarkOrderCompletedReq = map[int32]string{
	1: "UserId",
	2: "OrderId",
}

var fieldIDToName_MarkOrderCompletedResp = map[int32]string{
	1: "StatusCode",
}

var fieldIDToName_ListOrderFromSellerReq = map[int32]string{
	1: "SellerId",
}

var fieldIDToName_ListOrderFromSellerResp = map[int32]string{
	1: "Orders",
	2: "StatusCode",
}

var _ = cart.File_idl_cart_proto
