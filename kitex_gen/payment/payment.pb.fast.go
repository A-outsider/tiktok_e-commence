// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package rpcPayment

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *CreatePaymentReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreatePaymentReq[number], err)
}

func (x *CreatePaymentReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Oid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreatePaymentReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Amount, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *CreatePaymentReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreatePaymentResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreatePaymentResp[number], err)
}

func (x *CreatePaymentResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreatePaymentResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PaymentUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PayCallbackReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PayCallbackReq[number], err)
}

func (x *PayCallbackReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.RawData, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *PayCallbackResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PayCallbackResp[number], err)
}

func (x *PayCallbackResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PayNotifyReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PayNotifyReq[number], err)
}

func (x *PayNotifyReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.RawData, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *PayNotifyResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PayNotifyResp[number], err)
}

func (x *PayNotifyResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreatePaymentReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *CreatePaymentReq) fastWriteField1(buf []byte) (offset int) {
	if x.Oid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOid())
	return offset
}

func (x *CreatePaymentReq) fastWriteField2(buf []byte) (offset int) {
	if x.Amount == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 2, x.GetAmount())
	return offset
}

func (x *CreatePaymentReq) fastWriteField3(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetUserId())
	return offset
}

func (x *CreatePaymentResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CreatePaymentResp) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *CreatePaymentResp) fastWriteField2(buf []byte) (offset int) {
	if x.PaymentUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPaymentUrl())
	return offset
}

func (x *PayCallbackReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *PayCallbackReq) fastWriteField1(buf []byte) (offset int) {
	if len(x.RawData) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 1, x.GetRawData())
	return offset
}

func (x *PayCallbackResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *PayCallbackResp) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *PayNotifyReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *PayNotifyReq) fastWriteField1(buf []byte) (offset int) {
	if len(x.RawData) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 1, x.GetRawData())
	return offset
}

func (x *PayNotifyResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *PayNotifyResp) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *CreatePaymentReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *CreatePaymentReq) sizeField1() (n int) {
	if x.Oid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetOid())
	return n
}

func (x *CreatePaymentReq) sizeField2() (n int) {
	if x.Amount == 0 {
		return n
	}
	n += fastpb.SizeDouble(2, x.GetAmount())
	return n
}

func (x *CreatePaymentReq) sizeField3() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetUserId())
	return n
}

func (x *CreatePaymentResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CreatePaymentResp) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *CreatePaymentResp) sizeField2() (n int) {
	if x.PaymentUrl == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetPaymentUrl())
	return n
}

func (x *PayCallbackReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *PayCallbackReq) sizeField1() (n int) {
	if len(x.RawData) == 0 {
		return n
	}
	n += fastpb.SizeBytes(1, x.GetRawData())
	return n
}

func (x *PayCallbackResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *PayCallbackResp) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *PayNotifyReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *PayNotifyReq) sizeField1() (n int) {
	if len(x.RawData) == 0 {
		return n
	}
	n += fastpb.SizeBytes(1, x.GetRawData())
	return n
}

func (x *PayNotifyResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *PayNotifyResp) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

var fieldIDToName_CreatePaymentReq = map[int32]string{
	1: "Oid",
	2: "Amount",
	3: "UserId",
}

var fieldIDToName_CreatePaymentResp = map[int32]string{
	1: "StatusCode",
	2: "PaymentUrl",
}

var fieldIDToName_PayCallbackReq = map[int32]string{
	1: "RawData",
}

var fieldIDToName_PayCallbackResp = map[int32]string{
	1: "StatusCode",
}

var fieldIDToName_PayNotifyReq = map[int32]string{
	1: "RawData",
}

var fieldIDToName_PayNotifyResp = map[int32]string{
	1: "StatusCode",
}
