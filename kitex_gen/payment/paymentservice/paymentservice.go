// Code generated by Kitex v0.11.3. DO NOT EDIT.

package paymentservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	payment "gomall/kitex_gen/payment"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreatePayment": kitex.NewMethodInfo(
		createPaymentHandler,
		newCreatePaymentArgs,
		newCreatePaymentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"PayCallback": kitex.NewMethodInfo(
		payCallbackHandler,
		newPayCallbackArgs,
		newPayCallbackResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"PayNotify": kitex.NewMethodInfo(
		payNotifyHandler,
		newPayNotifyArgs,
		newPayNotifyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	paymentServiceServiceInfo                = NewServiceInfo()
	paymentServiceServiceInfoForClient       = NewServiceInfoForClient()
	paymentServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return paymentServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return paymentServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return paymentServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "PaymentService"
	handlerType := (*payment.PaymentService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "payment",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func createPaymentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(payment.CreatePaymentReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(payment.PaymentService).CreatePayment(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreatePaymentArgs:
		success, err := handler.(payment.PaymentService).CreatePayment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreatePaymentResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreatePaymentArgs() interface{} {
	return &CreatePaymentArgs{}
}

func newCreatePaymentResult() interface{} {
	return &CreatePaymentResult{}
}

type CreatePaymentArgs struct {
	Req *payment.CreatePaymentReq
}

func (p *CreatePaymentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(payment.CreatePaymentReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreatePaymentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreatePaymentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreatePaymentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreatePaymentArgs) Unmarshal(in []byte) error {
	msg := new(payment.CreatePaymentReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreatePaymentArgs_Req_DEFAULT *payment.CreatePaymentReq

func (p *CreatePaymentArgs) GetReq() *payment.CreatePaymentReq {
	if !p.IsSetReq() {
		return CreatePaymentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreatePaymentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreatePaymentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreatePaymentResult struct {
	Success *payment.CreatePaymentResp
}

var CreatePaymentResult_Success_DEFAULT *payment.CreatePaymentResp

func (p *CreatePaymentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(payment.CreatePaymentResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreatePaymentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreatePaymentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreatePaymentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreatePaymentResult) Unmarshal(in []byte) error {
	msg := new(payment.CreatePaymentResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreatePaymentResult) GetSuccess() *payment.CreatePaymentResp {
	if !p.IsSetSuccess() {
		return CreatePaymentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreatePaymentResult) SetSuccess(x interface{}) {
	p.Success = x.(*payment.CreatePaymentResp)
}

func (p *CreatePaymentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreatePaymentResult) GetResult() interface{} {
	return p.Success
}

func payCallbackHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(payment.PayCallbackReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(payment.PaymentService).PayCallback(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *PayCallbackArgs:
		success, err := handler.(payment.PaymentService).PayCallback(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PayCallbackResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newPayCallbackArgs() interface{} {
	return &PayCallbackArgs{}
}

func newPayCallbackResult() interface{} {
	return &PayCallbackResult{}
}

type PayCallbackArgs struct {
	Req *payment.PayCallbackReq
}

func (p *PayCallbackArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(payment.PayCallbackReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *PayCallbackArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *PayCallbackArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *PayCallbackArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *PayCallbackArgs) Unmarshal(in []byte) error {
	msg := new(payment.PayCallbackReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PayCallbackArgs_Req_DEFAULT *payment.PayCallbackReq

func (p *PayCallbackArgs) GetReq() *payment.PayCallbackReq {
	if !p.IsSetReq() {
		return PayCallbackArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PayCallbackArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PayCallbackArgs) GetFirstArgument() interface{} {
	return p.Req
}

type PayCallbackResult struct {
	Success *payment.PayCallbackResp
}

var PayCallbackResult_Success_DEFAULT *payment.PayCallbackResp

func (p *PayCallbackResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(payment.PayCallbackResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *PayCallbackResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *PayCallbackResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *PayCallbackResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *PayCallbackResult) Unmarshal(in []byte) error {
	msg := new(payment.PayCallbackResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PayCallbackResult) GetSuccess() *payment.PayCallbackResp {
	if !p.IsSetSuccess() {
		return PayCallbackResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PayCallbackResult) SetSuccess(x interface{}) {
	p.Success = x.(*payment.PayCallbackResp)
}

func (p *PayCallbackResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PayCallbackResult) GetResult() interface{} {
	return p.Success
}

func payNotifyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(payment.PayNotifyReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(payment.PaymentService).PayNotify(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *PayNotifyArgs:
		success, err := handler.(payment.PaymentService).PayNotify(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PayNotifyResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newPayNotifyArgs() interface{} {
	return &PayNotifyArgs{}
}

func newPayNotifyResult() interface{} {
	return &PayNotifyResult{}
}

type PayNotifyArgs struct {
	Req *payment.PayNotifyReq
}

func (p *PayNotifyArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(payment.PayNotifyReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *PayNotifyArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *PayNotifyArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *PayNotifyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *PayNotifyArgs) Unmarshal(in []byte) error {
	msg := new(payment.PayNotifyReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PayNotifyArgs_Req_DEFAULT *payment.PayNotifyReq

func (p *PayNotifyArgs) GetReq() *payment.PayNotifyReq {
	if !p.IsSetReq() {
		return PayNotifyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PayNotifyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PayNotifyArgs) GetFirstArgument() interface{} {
	return p.Req
}

type PayNotifyResult struct {
	Success *payment.PayNotifyResp
}

var PayNotifyResult_Success_DEFAULT *payment.PayNotifyResp

func (p *PayNotifyResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(payment.PayNotifyResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *PayNotifyResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *PayNotifyResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *PayNotifyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *PayNotifyResult) Unmarshal(in []byte) error {
	msg := new(payment.PayNotifyResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PayNotifyResult) GetSuccess() *payment.PayNotifyResp {
	if !p.IsSetSuccess() {
		return PayNotifyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PayNotifyResult) SetSuccess(x interface{}) {
	p.Success = x.(*payment.PayNotifyResp)
}

func (p *PayNotifyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PayNotifyResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreatePayment(ctx context.Context, Req *payment.CreatePaymentReq) (r *payment.CreatePaymentResp, err error) {
	var _args CreatePaymentArgs
	_args.Req = Req
	var _result CreatePaymentResult
	if err = p.c.Call(ctx, "CreatePayment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PayCallback(ctx context.Context, Req *payment.PayCallbackReq) (r *payment.PayCallbackResp, err error) {
	var _args PayCallbackArgs
	_args.Req = Req
	var _result PayCallbackResult
	if err = p.c.Call(ctx, "PayCallback", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PayNotify(ctx context.Context, Req *payment.PayNotifyReq) (r *payment.PayNotifyResp, err error) {
	var _args PayNotifyArgs
	_args.Req = Req
	var _result PayNotifyResult
	if err = p.c.Call(ctx, "PayNotify", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
