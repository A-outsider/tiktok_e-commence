// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package rpcSeckill

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *SeckillProductInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SeckillProductInfo[number], err)
}

func (x *SeckillProductInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Spid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SeckillProductInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Pid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SeckillProductInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.SeckillPrice, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *SeckillProductInfo) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Stock, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SeckillProductInfo) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.StartTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SeckillProductInfo) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.EndTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SeckillProductInfo) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.LimitPerUser, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *SeckillProductInfo) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.IsActive, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *SeckillProductInfo) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.ProductName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SeckillProductInfo) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.ProductImage, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateSeckillProductReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateSeckillProductReq[number], err)
}

func (x *CreateSeckillProductReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateSeckillProductReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.SeckillPrice, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *CreateSeckillProductReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Stock, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateSeckillProductReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.StartTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateSeckillProductReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.EndTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateSeckillProductReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.LimitPerUser, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *CreateSeckillProductReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.IsActive, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *CreateSeckillProductResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateSeckillProductResp[number], err)
}

func (x *CreateSeckillProductResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateSeckillProductResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.StatusMsg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateSeckillProductResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Spid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetSeckillProductReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetSeckillProductReq[number], err)
}

func (x *GetSeckillProductReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Spid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetSeckillProductResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetSeckillProductResp[number], err)
}

func (x *GetSeckillProductResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetSeckillProductResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.StatusMsg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetSeckillProductResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v SeckillProductInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Product = &v
	return offset, nil
}

func (x *ListActiveSeckillProductsReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListActiveSeckillProductsReq[number], err)
}

func (x *ListActiveSeckillProductsReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Page, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ListActiveSeckillProductsReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ListActiveSeckillProductsResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListActiveSeckillProductsResp[number], err)
}

func (x *ListActiveSeckillProductsResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListActiveSeckillProductsResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.StatusMsg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListActiveSeckillProductsResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v SeckillProductInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Products = append(x.Products, &v)
	return offset, nil
}

func (x *ListActiveSeckillProductsResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *DoSeckillReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DoSeckillReq[number], err)
}

func (x *DoSeckillReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Spid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DoSeckillReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DoSeckillReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Quantity, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DoSeckillResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DoSeckillResp[number], err)
}

func (x *DoSeckillResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DoSeckillResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.StatusMsg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DoSeckillResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.FlowId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ConfirmSeckillOrderReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ConfirmSeckillOrderReq[number], err)
}

func (x *ConfirmSeckillOrderReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FlowId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ConfirmSeckillOrderReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ConfirmSeckillOrderResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ConfirmSeckillOrderResp[number], err)
}

func (x *ConfirmSeckillOrderResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ConfirmSeckillOrderResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.StatusMsg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CancelSeckillReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CancelSeckillReq[number], err)
}

func (x *CancelSeckillReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FlowId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CancelSeckillResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CancelSeckillResp[number], err)
}

func (x *CancelSeckillResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CancelSeckillResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.StatusMsg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SeckillProductInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	return offset
}

func (x *SeckillProductInfo) fastWriteField1(buf []byte) (offset int) {
	if x.Spid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetSpid())
	return offset
}

func (x *SeckillProductInfo) fastWriteField2(buf []byte) (offset int) {
	if x.Pid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPid())
	return offset
}

func (x *SeckillProductInfo) fastWriteField3(buf []byte) (offset int) {
	if x.SeckillPrice == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 3, x.GetSeckillPrice())
	return offset
}

func (x *SeckillProductInfo) fastWriteField4(buf []byte) (offset int) {
	if x.Stock == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetStock())
	return offset
}

func (x *SeckillProductInfo) fastWriteField5(buf []byte) (offset int) {
	if x.StartTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetStartTime())
	return offset
}

func (x *SeckillProductInfo) fastWriteField6(buf []byte) (offset int) {
	if x.EndTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetEndTime())
	return offset
}

func (x *SeckillProductInfo) fastWriteField7(buf []byte) (offset int) {
	if x.LimitPerUser == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 7, x.GetLimitPerUser())
	return offset
}

func (x *SeckillProductInfo) fastWriteField8(buf []byte) (offset int) {
	if !x.IsActive {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 8, x.GetIsActive())
	return offset
}

func (x *SeckillProductInfo) fastWriteField9(buf []byte) (offset int) {
	if x.ProductName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetProductName())
	return offset
}

func (x *SeckillProductInfo) fastWriteField10(buf []byte) (offset int) {
	if x.ProductImage == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 10, x.GetProductImage())
	return offset
}

func (x *CreateSeckillProductReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *CreateSeckillProductReq) fastWriteField1(buf []byte) (offset int) {
	if x.Pid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPid())
	return offset
}

func (x *CreateSeckillProductReq) fastWriteField2(buf []byte) (offset int) {
	if x.SeckillPrice == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 2, x.GetSeckillPrice())
	return offset
}

func (x *CreateSeckillProductReq) fastWriteField3(buf []byte) (offset int) {
	if x.Stock == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetStock())
	return offset
}

func (x *CreateSeckillProductReq) fastWriteField4(buf []byte) (offset int) {
	if x.StartTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetStartTime())
	return offset
}

func (x *CreateSeckillProductReq) fastWriteField5(buf []byte) (offset int) {
	if x.EndTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetEndTime())
	return offset
}

func (x *CreateSeckillProductReq) fastWriteField6(buf []byte) (offset int) {
	if x.LimitPerUser == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 6, x.GetLimitPerUser())
	return offset
}

func (x *CreateSeckillProductReq) fastWriteField7(buf []byte) (offset int) {
	if !x.IsActive {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 7, x.GetIsActive())
	return offset
}

func (x *CreateSeckillProductResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *CreateSeckillProductResp) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *CreateSeckillProductResp) fastWriteField2(buf []byte) (offset int) {
	if x.StatusMsg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetStatusMsg())
	return offset
}

func (x *CreateSeckillProductResp) fastWriteField3(buf []byte) (offset int) {
	if x.Spid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetSpid())
	return offset
}

func (x *GetSeckillProductReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetSeckillProductReq) fastWriteField1(buf []byte) (offset int) {
	if x.Spid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetSpid())
	return offset
}

func (x *GetSeckillProductResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetSeckillProductResp) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *GetSeckillProductResp) fastWriteField2(buf []byte) (offset int) {
	if x.StatusMsg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetStatusMsg())
	return offset
}

func (x *GetSeckillProductResp) fastWriteField3(buf []byte) (offset int) {
	if x.Product == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetProduct())
	return offset
}

func (x *ListActiveSeckillProductsReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ListActiveSeckillProductsReq) fastWriteField1(buf []byte) (offset int) {
	if x.Page == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetPage())
	return offset
}

func (x *ListActiveSeckillProductsReq) fastWriteField2(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetPageSize())
	return offset
}

func (x *ListActiveSeckillProductsResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *ListActiveSeckillProductsResp) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *ListActiveSeckillProductsResp) fastWriteField2(buf []byte) (offset int) {
	if x.StatusMsg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetStatusMsg())
	return offset
}

func (x *ListActiveSeckillProductsResp) fastWriteField3(buf []byte) (offset int) {
	if x.Products == nil {
		return offset
	}
	for i := range x.GetProducts() {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.GetProducts()[i])
	}
	return offset
}

func (x *ListActiveSeckillProductsResp) fastWriteField4(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, x.GetTotal())
	return offset
}

func (x *DoSeckillReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *DoSeckillReq) fastWriteField1(buf []byte) (offset int) {
	if x.Spid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetSpid())
	return offset
}

func (x *DoSeckillReq) fastWriteField2(buf []byte) (offset int) {
	if x.Uid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUid())
	return offset
}

func (x *DoSeckillReq) fastWriteField3(buf []byte) (offset int) {
	if x.Quantity == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetQuantity())
	return offset
}

func (x *DoSeckillResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *DoSeckillResp) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *DoSeckillResp) fastWriteField2(buf []byte) (offset int) {
	if x.StatusMsg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetStatusMsg())
	return offset
}

func (x *DoSeckillResp) fastWriteField3(buf []byte) (offset int) {
	if x.FlowId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetFlowId())
	return offset
}

func (x *ConfirmSeckillOrderReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ConfirmSeckillOrderReq) fastWriteField1(buf []byte) (offset int) {
	if x.FlowId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFlowId())
	return offset
}

func (x *ConfirmSeckillOrderReq) fastWriteField2(buf []byte) (offset int) {
	if x.OrderId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOrderId())
	return offset
}

func (x *ConfirmSeckillOrderResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ConfirmSeckillOrderResp) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *ConfirmSeckillOrderResp) fastWriteField2(buf []byte) (offset int) {
	if x.StatusMsg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetStatusMsg())
	return offset
}

func (x *CancelSeckillReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CancelSeckillReq) fastWriteField1(buf []byte) (offset int) {
	if x.FlowId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFlowId())
	return offset
}

func (x *CancelSeckillResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CancelSeckillResp) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *CancelSeckillResp) fastWriteField2(buf []byte) (offset int) {
	if x.StatusMsg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetStatusMsg())
	return offset
}

func (x *SeckillProductInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	return n
}

func (x *SeckillProductInfo) sizeField1() (n int) {
	if x.Spid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetSpid())
	return n
}

func (x *SeckillProductInfo) sizeField2() (n int) {
	if x.Pid == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetPid())
	return n
}

func (x *SeckillProductInfo) sizeField3() (n int) {
	if x.SeckillPrice == 0 {
		return n
	}
	n += fastpb.SizeDouble(3, x.GetSeckillPrice())
	return n
}

func (x *SeckillProductInfo) sizeField4() (n int) {
	if x.Stock == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetStock())
	return n
}

func (x *SeckillProductInfo) sizeField5() (n int) {
	if x.StartTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetStartTime())
	return n
}

func (x *SeckillProductInfo) sizeField6() (n int) {
	if x.EndTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetEndTime())
	return n
}

func (x *SeckillProductInfo) sizeField7() (n int) {
	if x.LimitPerUser == 0 {
		return n
	}
	n += fastpb.SizeInt32(7, x.GetLimitPerUser())
	return n
}

func (x *SeckillProductInfo) sizeField8() (n int) {
	if !x.IsActive {
		return n
	}
	n += fastpb.SizeBool(8, x.GetIsActive())
	return n
}

func (x *SeckillProductInfo) sizeField9() (n int) {
	if x.ProductName == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetProductName())
	return n
}

func (x *SeckillProductInfo) sizeField10() (n int) {
	if x.ProductImage == "" {
		return n
	}
	n += fastpb.SizeString(10, x.GetProductImage())
	return n
}

func (x *CreateSeckillProductReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *CreateSeckillProductReq) sizeField1() (n int) {
	if x.Pid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPid())
	return n
}

func (x *CreateSeckillProductReq) sizeField2() (n int) {
	if x.SeckillPrice == 0 {
		return n
	}
	n += fastpb.SizeDouble(2, x.GetSeckillPrice())
	return n
}

func (x *CreateSeckillProductReq) sizeField3() (n int) {
	if x.Stock == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetStock())
	return n
}

func (x *CreateSeckillProductReq) sizeField4() (n int) {
	if x.StartTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetStartTime())
	return n
}

func (x *CreateSeckillProductReq) sizeField5() (n int) {
	if x.EndTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetEndTime())
	return n
}

func (x *CreateSeckillProductReq) sizeField6() (n int) {
	if x.LimitPerUser == 0 {
		return n
	}
	n += fastpb.SizeInt32(6, x.GetLimitPerUser())
	return n
}

func (x *CreateSeckillProductReq) sizeField7() (n int) {
	if !x.IsActive {
		return n
	}
	n += fastpb.SizeBool(7, x.GetIsActive())
	return n
}

func (x *CreateSeckillProductResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *CreateSeckillProductResp) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *CreateSeckillProductResp) sizeField2() (n int) {
	if x.StatusMsg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetStatusMsg())
	return n
}

func (x *CreateSeckillProductResp) sizeField3() (n int) {
	if x.Spid == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetSpid())
	return n
}

func (x *GetSeckillProductReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetSeckillProductReq) sizeField1() (n int) {
	if x.Spid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetSpid())
	return n
}

func (x *GetSeckillProductResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetSeckillProductResp) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *GetSeckillProductResp) sizeField2() (n int) {
	if x.StatusMsg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetStatusMsg())
	return n
}

func (x *GetSeckillProductResp) sizeField3() (n int) {
	if x.Product == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetProduct())
	return n
}

func (x *ListActiveSeckillProductsReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ListActiveSeckillProductsReq) sizeField1() (n int) {
	if x.Page == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetPage())
	return n
}

func (x *ListActiveSeckillProductsReq) sizeField2() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetPageSize())
	return n
}

func (x *ListActiveSeckillProductsResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *ListActiveSeckillProductsResp) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *ListActiveSeckillProductsResp) sizeField2() (n int) {
	if x.StatusMsg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetStatusMsg())
	return n
}

func (x *ListActiveSeckillProductsResp) sizeField3() (n int) {
	if x.Products == nil {
		return n
	}
	for i := range x.GetProducts() {
		n += fastpb.SizeMessage(3, x.GetProducts()[i])
	}
	return n
}

func (x *ListActiveSeckillProductsResp) sizeField4() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, x.GetTotal())
	return n
}

func (x *DoSeckillReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *DoSeckillReq) sizeField1() (n int) {
	if x.Spid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetSpid())
	return n
}

func (x *DoSeckillReq) sizeField2() (n int) {
	if x.Uid == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUid())
	return n
}

func (x *DoSeckillReq) sizeField3() (n int) {
	if x.Quantity == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetQuantity())
	return n
}

func (x *DoSeckillResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *DoSeckillResp) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *DoSeckillResp) sizeField2() (n int) {
	if x.StatusMsg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetStatusMsg())
	return n
}

func (x *DoSeckillResp) sizeField3() (n int) {
	if x.FlowId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetFlowId())
	return n
}

func (x *ConfirmSeckillOrderReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ConfirmSeckillOrderReq) sizeField1() (n int) {
	if x.FlowId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFlowId())
	return n
}

func (x *ConfirmSeckillOrderReq) sizeField2() (n int) {
	if x.OrderId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetOrderId())
	return n
}

func (x *ConfirmSeckillOrderResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ConfirmSeckillOrderResp) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *ConfirmSeckillOrderResp) sizeField2() (n int) {
	if x.StatusMsg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetStatusMsg())
	return n
}

func (x *CancelSeckillReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CancelSeckillReq) sizeField1() (n int) {
	if x.FlowId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFlowId())
	return n
}

func (x *CancelSeckillResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CancelSeckillResp) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *CancelSeckillResp) sizeField2() (n int) {
	if x.StatusMsg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetStatusMsg())
	return n
}

var fieldIDToName_SeckillProductInfo = map[int32]string{
	1:  "Spid",
	2:  "Pid",
	3:  "SeckillPrice",
	4:  "Stock",
	5:  "StartTime",
	6:  "EndTime",
	7:  "LimitPerUser",
	8:  "IsActive",
	9:  "ProductName",
	10: "ProductImage",
}

var fieldIDToName_CreateSeckillProductReq = map[int32]string{
	1: "Pid",
	2: "SeckillPrice",
	3: "Stock",
	4: "StartTime",
	5: "EndTime",
	6: "LimitPerUser",
	7: "IsActive",
}

var fieldIDToName_CreateSeckillProductResp = map[int32]string{
	1: "StatusCode",
	2: "StatusMsg",
	3: "Spid",
}

var fieldIDToName_GetSeckillProductReq = map[int32]string{
	1: "Spid",
}

var fieldIDToName_GetSeckillProductResp = map[int32]string{
	1: "StatusCode",
	2: "StatusMsg",
	3: "Product",
}

var fieldIDToName_ListActiveSeckillProductsReq = map[int32]string{
	1: "Page",
	2: "PageSize",
}

var fieldIDToName_ListActiveSeckillProductsResp = map[int32]string{
	1: "StatusCode",
	2: "StatusMsg",
	3: "Products",
	4: "Total",
}

var fieldIDToName_DoSeckillReq = map[int32]string{
	1: "Spid",
	2: "Uid",
	3: "Quantity",
}

var fieldIDToName_DoSeckillResp = map[int32]string{
	1: "StatusCode",
	2: "StatusMsg",
	3: "FlowId",
}

var fieldIDToName_ConfirmSeckillOrderReq = map[int32]string{
	1: "FlowId",
	2: "OrderId",
}

var fieldIDToName_ConfirmSeckillOrderResp = map[int32]string{
	1: "StatusCode",
	2: "StatusMsg",
}

var fieldIDToName_CancelSeckillReq = map[int32]string{
	1: "FlowId",
}

var fieldIDToName_CancelSeckillResp = map[int32]string{
	1: "StatusCode",
	2: "StatusMsg",
}
