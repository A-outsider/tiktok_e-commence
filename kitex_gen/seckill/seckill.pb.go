// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.28.0
// source: idl/seckill.proto

package rpcSeckill

import (
	context "context"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 秒杀商品信息
type SeckillProductInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spid         string  `protobuf:"bytes,1,opt,name=spid,proto3" json:"spid,omitempty"`                                        // 秒杀商品ID
	Pid          string  `protobuf:"bytes,2,opt,name=pid,proto3" json:"pid,omitempty"`                                          // 原商品ID
	SeckillPrice float64 `protobuf:"fixed64,3,opt,name=seckill_price,json=seckillPrice,proto3" json:"seckill_price,omitempty"`  // 秒杀价
	Stock        int64   `protobuf:"varint,4,opt,name=stock,proto3" json:"stock,omitempty"`                                     // 秒杀库存
	StartTime    int64   `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`            // 秒杀开始时间(Unix时间戳)
	EndTime      int64   `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                  // 秒杀结束时间(Unix时间戳)
	LimitPerUser int32   `protobuf:"varint,7,opt,name=limit_per_user,json=limitPerUser,proto3" json:"limit_per_user,omitempty"` // 每人限购数量
	IsActive     bool    `protobuf:"varint,8,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`               // 是否激活秒杀
	ProductName  string  `protobuf:"bytes,9,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`       // 商品名称
	ProductImage string  `protobuf:"bytes,10,opt,name=product_image,json=productImage,proto3" json:"product_image,omitempty"`   // 商品图片
}

func (x *SeckillProductInfo) Reset() {
	*x = SeckillProductInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_seckill_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeckillProductInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeckillProductInfo) ProtoMessage() {}

func (x *SeckillProductInfo) ProtoReflect() protoreflect.Message {
	mi := &file_idl_seckill_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeckillProductInfo.ProtoReflect.Descriptor instead.
func (*SeckillProductInfo) Descriptor() ([]byte, []int) {
	return file_idl_seckill_proto_rawDescGZIP(), []int{0}
}

func (x *SeckillProductInfo) GetSpid() string {
	if x != nil {
		return x.Spid
	}
	return ""
}

func (x *SeckillProductInfo) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *SeckillProductInfo) GetSeckillPrice() float64 {
	if x != nil {
		return x.SeckillPrice
	}
	return 0
}

func (x *SeckillProductInfo) GetStock() int64 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *SeckillProductInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SeckillProductInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SeckillProductInfo) GetLimitPerUser() int32 {
	if x != nil {
		return x.LimitPerUser
	}
	return 0
}

func (x *SeckillProductInfo) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *SeckillProductInfo) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *SeckillProductInfo) GetProductImage() string {
	if x != nil {
		return x.ProductImage
	}
	return ""
}

// 创建秒杀商品请求
type CreateSeckillProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid          string  `protobuf:"bytes,1,opt,name=pid,proto3" json:"pid,omitempty"`                                          // 原商品ID
	SeckillPrice float64 `protobuf:"fixed64,2,opt,name=seckill_price,json=seckillPrice,proto3" json:"seckill_price,omitempty"`  // 秒杀价
	Stock        int64   `protobuf:"varint,3,opt,name=stock,proto3" json:"stock,omitempty"`                                     // 秒杀库存
	StartTime    int64   `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`            // 秒杀开始时间(Unix时间戳)
	EndTime      int64   `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                  // 秒杀结束时间(Unix时间戳)
	LimitPerUser int32   `protobuf:"varint,6,opt,name=limit_per_user,json=limitPerUser,proto3" json:"limit_per_user,omitempty"` // 每人限购数量
	IsActive     bool    `protobuf:"varint,7,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`               // 是否激活秒杀
}

func (x *CreateSeckillProductReq) Reset() {
	*x = CreateSeckillProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_seckill_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSeckillProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSeckillProductReq) ProtoMessage() {}

func (x *CreateSeckillProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_idl_seckill_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSeckillProductReq.ProtoReflect.Descriptor instead.
func (*CreateSeckillProductReq) Descriptor() ([]byte, []int) {
	return file_idl_seckill_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSeckillProductReq) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *CreateSeckillProductReq) GetSeckillPrice() float64 {
	if x != nil {
		return x.SeckillPrice
	}
	return 0
}

func (x *CreateSeckillProductReq) GetStock() int64 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *CreateSeckillProductReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *CreateSeckillProductReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *CreateSeckillProductReq) GetLimitPerUser() int32 {
	if x != nil {
		return x.LimitPerUser
	}
	return 0
}

func (x *CreateSeckillProductReq) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

// 创建秒杀商品响应
type CreateSeckillProductResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int64  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"` // 状态码
	StatusMsg  string `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`     // 状态信息
	Spid       string `protobuf:"bytes,3,opt,name=spid,proto3" json:"spid,omitempty"`                                // 创建的秒杀商品ID
}

func (x *CreateSeckillProductResp) Reset() {
	*x = CreateSeckillProductResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_seckill_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSeckillProductResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSeckillProductResp) ProtoMessage() {}

func (x *CreateSeckillProductResp) ProtoReflect() protoreflect.Message {
	mi := &file_idl_seckill_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSeckillProductResp.ProtoReflect.Descriptor instead.
func (*CreateSeckillProductResp) Descriptor() ([]byte, []int) {
	return file_idl_seckill_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSeckillProductResp) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *CreateSeckillProductResp) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *CreateSeckillProductResp) GetSpid() string {
	if x != nil {
		return x.Spid
	}
	return ""
}

// 获取秒杀商品请求
type GetSeckillProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spid string `protobuf:"bytes,1,opt,name=spid,proto3" json:"spid,omitempty"` // 秒杀商品ID
}

func (x *GetSeckillProductReq) Reset() {
	*x = GetSeckillProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_seckill_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSeckillProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSeckillProductReq) ProtoMessage() {}

func (x *GetSeckillProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_idl_seckill_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSeckillProductReq.ProtoReflect.Descriptor instead.
func (*GetSeckillProductReq) Descriptor() ([]byte, []int) {
	return file_idl_seckill_proto_rawDescGZIP(), []int{3}
}

func (x *GetSeckillProductReq) GetSpid() string {
	if x != nil {
		return x.Spid
	}
	return ""
}

// 获取秒杀商品响应
type GetSeckillProductResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int64               `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"` // 状态码
	StatusMsg  string              `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`     // 状态信息
	Product    *SeckillProductInfo `protobuf:"bytes,3,opt,name=product,proto3" json:"product,omitempty"`                          // 秒杀商品信息
}

func (x *GetSeckillProductResp) Reset() {
	*x = GetSeckillProductResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_seckill_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSeckillProductResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSeckillProductResp) ProtoMessage() {}

func (x *GetSeckillProductResp) ProtoReflect() protoreflect.Message {
	mi := &file_idl_seckill_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSeckillProductResp.ProtoReflect.Descriptor instead.
func (*GetSeckillProductResp) Descriptor() ([]byte, []int) {
	return file_idl_seckill_proto_rawDescGZIP(), []int{4}
}

func (x *GetSeckillProductResp) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetSeckillProductResp) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *GetSeckillProductResp) GetProduct() *SeckillProductInfo {
	if x != nil {
		return x.Product
	}
	return nil
}

// 获取活动中的秒杀商品列表请求
type ListActiveSeckillProductsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                         // 页码
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 每页大小
}

func (x *ListActiveSeckillProductsReq) Reset() {
	*x = ListActiveSeckillProductsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_seckill_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListActiveSeckillProductsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActiveSeckillProductsReq) ProtoMessage() {}

func (x *ListActiveSeckillProductsReq) ProtoReflect() protoreflect.Message {
	mi := &file_idl_seckill_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActiveSeckillProductsReq.ProtoReflect.Descriptor instead.
func (*ListActiveSeckillProductsReq) Descriptor() ([]byte, []int) {
	return file_idl_seckill_proto_rawDescGZIP(), []int{5}
}

func (x *ListActiveSeckillProductsReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListActiveSeckillProductsReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 获取活动中的秒杀商品列表响应
type ListActiveSeckillProductsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int64                 `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"` // 状态码
	StatusMsg  string                `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`     // 状态信息
	Products   []*SeckillProductInfo `protobuf:"bytes,3,rep,name=products,proto3" json:"products,omitempty"`                        // 秒杀商品列表
	Total      int32                 `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`                             // 总数
}

func (x *ListActiveSeckillProductsResp) Reset() {
	*x = ListActiveSeckillProductsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_seckill_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListActiveSeckillProductsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActiveSeckillProductsResp) ProtoMessage() {}

func (x *ListActiveSeckillProductsResp) ProtoReflect() protoreflect.Message {
	mi := &file_idl_seckill_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActiveSeckillProductsResp.ProtoReflect.Descriptor instead.
func (*ListActiveSeckillProductsResp) Descriptor() ([]byte, []int) {
	return file_idl_seckill_proto_rawDescGZIP(), []int{6}
}

func (x *ListActiveSeckillProductsResp) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *ListActiveSeckillProductsResp) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *ListActiveSeckillProductsResp) GetProducts() []*SeckillProductInfo {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *ListActiveSeckillProductsResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 执行秒杀请求
type DoSeckillReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spid     string `protobuf:"bytes,1,opt,name=spid,proto3" json:"spid,omitempty"`          // 秒杀商品ID
	Uid      string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`            // 用户ID
	Quantity int64  `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"` // 购买数量
}

func (x *DoSeckillReq) Reset() {
	*x = DoSeckillReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_seckill_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoSeckillReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoSeckillReq) ProtoMessage() {}

func (x *DoSeckillReq) ProtoReflect() protoreflect.Message {
	mi := &file_idl_seckill_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoSeckillReq.ProtoReflect.Descriptor instead.
func (*DoSeckillReq) Descriptor() ([]byte, []int) {
	return file_idl_seckill_proto_rawDescGZIP(), []int{7}
}

func (x *DoSeckillReq) GetSpid() string {
	if x != nil {
		return x.Spid
	}
	return ""
}

func (x *DoSeckillReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DoSeckillReq) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

// 执行秒杀响应
type DoSeckillResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int64  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"` // 状态码
	StatusMsg  string `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`     // 状态信息
	FlowId     string `protobuf:"bytes,3,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`              // 流水ID
}

func (x *DoSeckillResp) Reset() {
	*x = DoSeckillResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_seckill_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoSeckillResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoSeckillResp) ProtoMessage() {}

func (x *DoSeckillResp) ProtoReflect() protoreflect.Message {
	mi := &file_idl_seckill_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoSeckillResp.ProtoReflect.Descriptor instead.
func (*DoSeckillResp) Descriptor() ([]byte, []int) {
	return file_idl_seckill_proto_rawDescGZIP(), []int{8}
}

func (x *DoSeckillResp) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *DoSeckillResp) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *DoSeckillResp) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

// 确认秒杀订单请求
type ConfirmSeckillOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId  string `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`    // 流水ID
	OrderId string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"` // 订单ID
}

func (x *ConfirmSeckillOrderReq) Reset() {
	*x = ConfirmSeckillOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_seckill_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmSeckillOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmSeckillOrderReq) ProtoMessage() {}

func (x *ConfirmSeckillOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_idl_seckill_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmSeckillOrderReq.ProtoReflect.Descriptor instead.
func (*ConfirmSeckillOrderReq) Descriptor() ([]byte, []int) {
	return file_idl_seckill_proto_rawDescGZIP(), []int{9}
}

func (x *ConfirmSeckillOrderReq) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *ConfirmSeckillOrderReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

// 确认秒杀订单响应
type ConfirmSeckillOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int64  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"` // 状态码
	StatusMsg  string `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`     // 状态信息
}

func (x *ConfirmSeckillOrderResp) Reset() {
	*x = ConfirmSeckillOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_seckill_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmSeckillOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmSeckillOrderResp) ProtoMessage() {}

func (x *ConfirmSeckillOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_idl_seckill_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmSeckillOrderResp.ProtoReflect.Descriptor instead.
func (*ConfirmSeckillOrderResp) Descriptor() ([]byte, []int) {
	return file_idl_seckill_proto_rawDescGZIP(), []int{10}
}

func (x *ConfirmSeckillOrderResp) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *ConfirmSeckillOrderResp) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

// 取消秒杀请求
type CancelSeckillReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId string `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"` // 流水ID
}

func (x *CancelSeckillReq) Reset() {
	*x = CancelSeckillReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_seckill_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelSeckillReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelSeckillReq) ProtoMessage() {}

func (x *CancelSeckillReq) ProtoReflect() protoreflect.Message {
	mi := &file_idl_seckill_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelSeckillReq.ProtoReflect.Descriptor instead.
func (*CancelSeckillReq) Descriptor() ([]byte, []int) {
	return file_idl_seckill_proto_rawDescGZIP(), []int{11}
}

func (x *CancelSeckillReq) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

// 取消秒杀响应
type CancelSeckillResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int64  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"` // 状态码
	StatusMsg  string `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`     // 状态信息
}

func (x *CancelSeckillResp) Reset() {
	*x = CancelSeckillResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_seckill_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelSeckillResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelSeckillResp) ProtoMessage() {}

func (x *CancelSeckillResp) ProtoReflect() protoreflect.Message {
	mi := &file_idl_seckill_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelSeckillResp.ProtoReflect.Descriptor instead.
func (*CancelSeckillResp) Descriptor() ([]byte, []int) {
	return file_idl_seckill_proto_rawDescGZIP(), []int{12}
}

func (x *CancelSeckillResp) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *CancelSeckillResp) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

var File_idl_seckill_proto protoreflect.FileDescriptor

var file_idl_seckill_proto_rawDesc = []byte{
	0x0a, 0x11, 0x69, 0x64, 0x6c, 0x2f, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x22, 0xba, 0x02, 0x0a,
	0x12, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xe3, 0x01, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22,
	0x6e, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x69, 0x64, 0x22,
	0x2a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x70, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x69, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c,
	0x2e, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x4f, 0x0a, 0x1c,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xae, 0x01,
	0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x63, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12,
	0x37, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x53, 0x65, 0x63, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x50,
	0x0a, 0x0c, 0x44, 0x6f, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x22, 0x68, 0x0a, 0x0d, 0x44, 0x6f, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73,
	0x67, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x16, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4d, 0x73, 0x67, 0x22, 0x2b, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x63,
	0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64,
	0x22, 0x53, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x73, 0x67, 0x32, 0x97, 0x04, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x20, 0x2e, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x21, 0x2e, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x2e, 0x73,
	0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x73, 0x65,
	0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6c, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x73, 0x65, 0x63,
	0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x26, 0x2e, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x09, 0x44,
	0x6f, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x15, 0x2e, 0x73, 0x65, 0x63, 0x6b, 0x69,
	0x6c, 0x6c, 0x2e, 0x44, 0x6f, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x44, 0x6f, 0x53, 0x65, 0x63, 0x6b,
	0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x13, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x1f, 0x2e, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x20, 0x2e, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53,
	0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x19, 0x2e, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x53, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42,
	0x25, 0x5a, 0x23, 0x67, 0x6f, 0x6d, 0x61, 0x6c, 0x6c, 0x2f, 0x6b, 0x69, 0x74, 0x65, 0x78, 0x5f,
	0x67, 0x65, 0x6e, 0x2f, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x3b, 0x72, 0x70, 0x63, 0x53,
	0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_idl_seckill_proto_rawDescOnce sync.Once
	file_idl_seckill_proto_rawDescData = file_idl_seckill_proto_rawDesc
)

func file_idl_seckill_proto_rawDescGZIP() []byte {
	file_idl_seckill_proto_rawDescOnce.Do(func() {
		file_idl_seckill_proto_rawDescData = protoimpl.X.CompressGZIP(file_idl_seckill_proto_rawDescData)
	})
	return file_idl_seckill_proto_rawDescData
}

var file_idl_seckill_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_idl_seckill_proto_goTypes = []interface{}{
	(*SeckillProductInfo)(nil),            // 0: seckill.SeckillProductInfo
	(*CreateSeckillProductReq)(nil),       // 1: seckill.CreateSeckillProductReq
	(*CreateSeckillProductResp)(nil),      // 2: seckill.CreateSeckillProductResp
	(*GetSeckillProductReq)(nil),          // 3: seckill.GetSeckillProductReq
	(*GetSeckillProductResp)(nil),         // 4: seckill.GetSeckillProductResp
	(*ListActiveSeckillProductsReq)(nil),  // 5: seckill.ListActiveSeckillProductsReq
	(*ListActiveSeckillProductsResp)(nil), // 6: seckill.ListActiveSeckillProductsResp
	(*DoSeckillReq)(nil),                  // 7: seckill.DoSeckillReq
	(*DoSeckillResp)(nil),                 // 8: seckill.DoSeckillResp
	(*ConfirmSeckillOrderReq)(nil),        // 9: seckill.ConfirmSeckillOrderReq
	(*ConfirmSeckillOrderResp)(nil),       // 10: seckill.ConfirmSeckillOrderResp
	(*CancelSeckillReq)(nil),              // 11: seckill.CancelSeckillReq
	(*CancelSeckillResp)(nil),             // 12: seckill.CancelSeckillResp
}
var file_idl_seckill_proto_depIdxs = []int32{
	0,  // 0: seckill.GetSeckillProductResp.product:type_name -> seckill.SeckillProductInfo
	0,  // 1: seckill.ListActiveSeckillProductsResp.products:type_name -> seckill.SeckillProductInfo
	1,  // 2: seckill.SeckillService.CreateSeckillProduct:input_type -> seckill.CreateSeckillProductReq
	3,  // 3: seckill.SeckillService.GetSeckillProduct:input_type -> seckill.GetSeckillProductReq
	5,  // 4: seckill.SeckillService.ListActiveSeckillProducts:input_type -> seckill.ListActiveSeckillProductsReq
	7,  // 5: seckill.SeckillService.DoSeckill:input_type -> seckill.DoSeckillReq
	9,  // 6: seckill.SeckillService.ConfirmSeckillOrder:input_type -> seckill.ConfirmSeckillOrderReq
	11, // 7: seckill.SeckillService.CancelSeckill:input_type -> seckill.CancelSeckillReq
	2,  // 8: seckill.SeckillService.CreateSeckillProduct:output_type -> seckill.CreateSeckillProductResp
	4,  // 9: seckill.SeckillService.GetSeckillProduct:output_type -> seckill.GetSeckillProductResp
	6,  // 10: seckill.SeckillService.ListActiveSeckillProducts:output_type -> seckill.ListActiveSeckillProductsResp
	8,  // 11: seckill.SeckillService.DoSeckill:output_type -> seckill.DoSeckillResp
	10, // 12: seckill.SeckillService.ConfirmSeckillOrder:output_type -> seckill.ConfirmSeckillOrderResp
	12, // 13: seckill.SeckillService.CancelSeckill:output_type -> seckill.CancelSeckillResp
	8,  // [8:14] is the sub-list for method output_type
	2,  // [2:8] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_idl_seckill_proto_init() }
func file_idl_seckill_proto_init() {
	if File_idl_seckill_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_idl_seckill_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeckillProductInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_seckill_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSeckillProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_seckill_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSeckillProductResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_seckill_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSeckillProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_seckill_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSeckillProductResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_seckill_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListActiveSeckillProductsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_seckill_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListActiveSeckillProductsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_seckill_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoSeckillReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_seckill_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoSeckillResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_seckill_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmSeckillOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_seckill_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmSeckillOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_seckill_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelSeckillReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_seckill_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelSeckillResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_idl_seckill_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_idl_seckill_proto_goTypes,
		DependencyIndexes: file_idl_seckill_proto_depIdxs,
		MessageInfos:      file_idl_seckill_proto_msgTypes,
	}.Build()
	File_idl_seckill_proto = out.File
	file_idl_seckill_proto_rawDesc = nil
	file_idl_seckill_proto_goTypes = nil
	file_idl_seckill_proto_depIdxs = nil
}

var _ context.Context

// Code generated by Kitex v0.11.3. DO NOT EDIT.

type SeckillService interface {
	CreateSeckillProduct(ctx context.Context, req *CreateSeckillProductReq) (res *CreateSeckillProductResp, err error)
	GetSeckillProduct(ctx context.Context, req *GetSeckillProductReq) (res *GetSeckillProductResp, err error)
	ListActiveSeckillProducts(ctx context.Context, req *ListActiveSeckillProductsReq) (res *ListActiveSeckillProductsResp, err error)
	DoSeckill(ctx context.Context, req *DoSeckillReq) (res *DoSeckillResp, err error)
	ConfirmSeckillOrder(ctx context.Context, req *ConfirmSeckillOrderReq) (res *ConfirmSeckillOrderResp, err error)
	CancelSeckill(ctx context.Context, req *CancelSeckillReq) (res *CancelSeckillResp, err error)
}
