// Code generated by Kitex v0.11.3. DO NOT EDIT.

package seckillservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	seckill "gomall/kitex_gen/seckill"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateSeckillProduct(ctx context.Context, Req *seckill.CreateSeckillProductReq, callOptions ...callopt.Option) (r *seckill.CreateSeckillProductResp, err error)
	GetSeckillProduct(ctx context.Context, Req *seckill.GetSeckillProductReq, callOptions ...callopt.Option) (r *seckill.GetSeckillProductResp, err error)
	ListActiveSeckillProducts(ctx context.Context, Req *seckill.ListActiveSeckillProductsReq, callOptions ...callopt.Option) (r *seckill.ListActiveSeckillProductsResp, err error)
	DoSeckill(ctx context.Context, Req *seckill.DoSeckillReq, callOptions ...callopt.Option) (r *seckill.DoSeckillResp, err error)
	ConfirmSeckillOrder(ctx context.Context, Req *seckill.ConfirmSeckillOrderReq, callOptions ...callopt.Option) (r *seckill.ConfirmSeckillOrderResp, err error)
	CancelSeckill(ctx context.Context, Req *seckill.CancelSeckillReq, callOptions ...callopt.Option) (r *seckill.CancelSeckillResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kSeckillServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kSeckillServiceClient struct {
	*kClient
}

func (p *kSeckillServiceClient) CreateSeckillProduct(ctx context.Context, Req *seckill.CreateSeckillProductReq, callOptions ...callopt.Option) (r *seckill.CreateSeckillProductResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateSeckillProduct(ctx, Req)
}

func (p *kSeckillServiceClient) GetSeckillProduct(ctx context.Context, Req *seckill.GetSeckillProductReq, callOptions ...callopt.Option) (r *seckill.GetSeckillProductResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetSeckillProduct(ctx, Req)
}

func (p *kSeckillServiceClient) ListActiveSeckillProducts(ctx context.Context, Req *seckill.ListActiveSeckillProductsReq, callOptions ...callopt.Option) (r *seckill.ListActiveSeckillProductsResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListActiveSeckillProducts(ctx, Req)
}

func (p *kSeckillServiceClient) DoSeckill(ctx context.Context, Req *seckill.DoSeckillReq, callOptions ...callopt.Option) (r *seckill.DoSeckillResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DoSeckill(ctx, Req)
}

func (p *kSeckillServiceClient) ConfirmSeckillOrder(ctx context.Context, Req *seckill.ConfirmSeckillOrderReq, callOptions ...callopt.Option) (r *seckill.ConfirmSeckillOrderResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ConfirmSeckillOrder(ctx, Req)
}

func (p *kSeckillServiceClient) CancelSeckill(ctx context.Context, Req *seckill.CancelSeckillReq, callOptions ...callopt.Option) (r *seckill.CancelSeckillResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CancelSeckill(ctx, Req)
}
