// Code generated by Kitex v0.11.3. DO NOT EDIT.

package seckillservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	seckill "gomall/kitex_gen/seckill"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateSeckillProduct": kitex.NewMethodInfo(
		createSeckillProductHandler,
		newCreateSeckillProductArgs,
		newCreateSeckillProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetSeckillProduct": kitex.NewMethodInfo(
		getSeckillProductHandler,
		newGetSeckillProductArgs,
		newGetSeckillProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListActiveSeckillProducts": kitex.NewMethodInfo(
		listActiveSeckillProductsHandler,
		newListActiveSeckillProductsArgs,
		newListActiveSeckillProductsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DoSeckill": kitex.NewMethodInfo(
		doSeckillHandler,
		newDoSeckillArgs,
		newDoSeckillResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ConfirmSeckillOrder": kitex.NewMethodInfo(
		confirmSeckillOrderHandler,
		newConfirmSeckillOrderArgs,
		newConfirmSeckillOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CancelSeckill": kitex.NewMethodInfo(
		cancelSeckillHandler,
		newCancelSeckillArgs,
		newCancelSeckillResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	seckillServiceServiceInfo                = NewServiceInfo()
	seckillServiceServiceInfoForClient       = NewServiceInfoForClient()
	seckillServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return seckillServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return seckillServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return seckillServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "SeckillService"
	handlerType := (*seckill.SeckillService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "seckill",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func createSeckillProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(seckill.CreateSeckillProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(seckill.SeckillService).CreateSeckillProduct(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateSeckillProductArgs:
		success, err := handler.(seckill.SeckillService).CreateSeckillProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateSeckillProductResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateSeckillProductArgs() interface{} {
	return &CreateSeckillProductArgs{}
}

func newCreateSeckillProductResult() interface{} {
	return &CreateSeckillProductResult{}
}

type CreateSeckillProductArgs struct {
	Req *seckill.CreateSeckillProductReq
}

func (p *CreateSeckillProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(seckill.CreateSeckillProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateSeckillProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateSeckillProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateSeckillProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateSeckillProductArgs) Unmarshal(in []byte) error {
	msg := new(seckill.CreateSeckillProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateSeckillProductArgs_Req_DEFAULT *seckill.CreateSeckillProductReq

func (p *CreateSeckillProductArgs) GetReq() *seckill.CreateSeckillProductReq {
	if !p.IsSetReq() {
		return CreateSeckillProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateSeckillProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateSeckillProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateSeckillProductResult struct {
	Success *seckill.CreateSeckillProductResp
}

var CreateSeckillProductResult_Success_DEFAULT *seckill.CreateSeckillProductResp

func (p *CreateSeckillProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(seckill.CreateSeckillProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateSeckillProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateSeckillProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateSeckillProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateSeckillProductResult) Unmarshal(in []byte) error {
	msg := new(seckill.CreateSeckillProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateSeckillProductResult) GetSuccess() *seckill.CreateSeckillProductResp {
	if !p.IsSetSuccess() {
		return CreateSeckillProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateSeckillProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*seckill.CreateSeckillProductResp)
}

func (p *CreateSeckillProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateSeckillProductResult) GetResult() interface{} {
	return p.Success
}

func getSeckillProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(seckill.GetSeckillProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(seckill.SeckillService).GetSeckillProduct(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetSeckillProductArgs:
		success, err := handler.(seckill.SeckillService).GetSeckillProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetSeckillProductResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetSeckillProductArgs() interface{} {
	return &GetSeckillProductArgs{}
}

func newGetSeckillProductResult() interface{} {
	return &GetSeckillProductResult{}
}

type GetSeckillProductArgs struct {
	Req *seckill.GetSeckillProductReq
}

func (p *GetSeckillProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(seckill.GetSeckillProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetSeckillProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetSeckillProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetSeckillProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetSeckillProductArgs) Unmarshal(in []byte) error {
	msg := new(seckill.GetSeckillProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetSeckillProductArgs_Req_DEFAULT *seckill.GetSeckillProductReq

func (p *GetSeckillProductArgs) GetReq() *seckill.GetSeckillProductReq {
	if !p.IsSetReq() {
		return GetSeckillProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetSeckillProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetSeckillProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetSeckillProductResult struct {
	Success *seckill.GetSeckillProductResp
}

var GetSeckillProductResult_Success_DEFAULT *seckill.GetSeckillProductResp

func (p *GetSeckillProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(seckill.GetSeckillProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetSeckillProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetSeckillProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetSeckillProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetSeckillProductResult) Unmarshal(in []byte) error {
	msg := new(seckill.GetSeckillProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetSeckillProductResult) GetSuccess() *seckill.GetSeckillProductResp {
	if !p.IsSetSuccess() {
		return GetSeckillProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetSeckillProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*seckill.GetSeckillProductResp)
}

func (p *GetSeckillProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetSeckillProductResult) GetResult() interface{} {
	return p.Success
}

func listActiveSeckillProductsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(seckill.ListActiveSeckillProductsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(seckill.SeckillService).ListActiveSeckillProducts(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListActiveSeckillProductsArgs:
		success, err := handler.(seckill.SeckillService).ListActiveSeckillProducts(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListActiveSeckillProductsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListActiveSeckillProductsArgs() interface{} {
	return &ListActiveSeckillProductsArgs{}
}

func newListActiveSeckillProductsResult() interface{} {
	return &ListActiveSeckillProductsResult{}
}

type ListActiveSeckillProductsArgs struct {
	Req *seckill.ListActiveSeckillProductsReq
}

func (p *ListActiveSeckillProductsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(seckill.ListActiveSeckillProductsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListActiveSeckillProductsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListActiveSeckillProductsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListActiveSeckillProductsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListActiveSeckillProductsArgs) Unmarshal(in []byte) error {
	msg := new(seckill.ListActiveSeckillProductsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListActiveSeckillProductsArgs_Req_DEFAULT *seckill.ListActiveSeckillProductsReq

func (p *ListActiveSeckillProductsArgs) GetReq() *seckill.ListActiveSeckillProductsReq {
	if !p.IsSetReq() {
		return ListActiveSeckillProductsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListActiveSeckillProductsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListActiveSeckillProductsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListActiveSeckillProductsResult struct {
	Success *seckill.ListActiveSeckillProductsResp
}

var ListActiveSeckillProductsResult_Success_DEFAULT *seckill.ListActiveSeckillProductsResp

func (p *ListActiveSeckillProductsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(seckill.ListActiveSeckillProductsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListActiveSeckillProductsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListActiveSeckillProductsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListActiveSeckillProductsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListActiveSeckillProductsResult) Unmarshal(in []byte) error {
	msg := new(seckill.ListActiveSeckillProductsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListActiveSeckillProductsResult) GetSuccess() *seckill.ListActiveSeckillProductsResp {
	if !p.IsSetSuccess() {
		return ListActiveSeckillProductsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListActiveSeckillProductsResult) SetSuccess(x interface{}) {
	p.Success = x.(*seckill.ListActiveSeckillProductsResp)
}

func (p *ListActiveSeckillProductsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListActiveSeckillProductsResult) GetResult() interface{} {
	return p.Success
}

func doSeckillHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(seckill.DoSeckillReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(seckill.SeckillService).DoSeckill(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DoSeckillArgs:
		success, err := handler.(seckill.SeckillService).DoSeckill(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DoSeckillResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDoSeckillArgs() interface{} {
	return &DoSeckillArgs{}
}

func newDoSeckillResult() interface{} {
	return &DoSeckillResult{}
}

type DoSeckillArgs struct {
	Req *seckill.DoSeckillReq
}

func (p *DoSeckillArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(seckill.DoSeckillReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DoSeckillArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DoSeckillArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DoSeckillArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DoSeckillArgs) Unmarshal(in []byte) error {
	msg := new(seckill.DoSeckillReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DoSeckillArgs_Req_DEFAULT *seckill.DoSeckillReq

func (p *DoSeckillArgs) GetReq() *seckill.DoSeckillReq {
	if !p.IsSetReq() {
		return DoSeckillArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DoSeckillArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DoSeckillArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DoSeckillResult struct {
	Success *seckill.DoSeckillResp
}

var DoSeckillResult_Success_DEFAULT *seckill.DoSeckillResp

func (p *DoSeckillResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(seckill.DoSeckillResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DoSeckillResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DoSeckillResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DoSeckillResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DoSeckillResult) Unmarshal(in []byte) error {
	msg := new(seckill.DoSeckillResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DoSeckillResult) GetSuccess() *seckill.DoSeckillResp {
	if !p.IsSetSuccess() {
		return DoSeckillResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DoSeckillResult) SetSuccess(x interface{}) {
	p.Success = x.(*seckill.DoSeckillResp)
}

func (p *DoSeckillResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DoSeckillResult) GetResult() interface{} {
	return p.Success
}

func confirmSeckillOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(seckill.ConfirmSeckillOrderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(seckill.SeckillService).ConfirmSeckillOrder(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ConfirmSeckillOrderArgs:
		success, err := handler.(seckill.SeckillService).ConfirmSeckillOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ConfirmSeckillOrderResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newConfirmSeckillOrderArgs() interface{} {
	return &ConfirmSeckillOrderArgs{}
}

func newConfirmSeckillOrderResult() interface{} {
	return &ConfirmSeckillOrderResult{}
}

type ConfirmSeckillOrderArgs struct {
	Req *seckill.ConfirmSeckillOrderReq
}

func (p *ConfirmSeckillOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(seckill.ConfirmSeckillOrderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ConfirmSeckillOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ConfirmSeckillOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ConfirmSeckillOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ConfirmSeckillOrderArgs) Unmarshal(in []byte) error {
	msg := new(seckill.ConfirmSeckillOrderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ConfirmSeckillOrderArgs_Req_DEFAULT *seckill.ConfirmSeckillOrderReq

func (p *ConfirmSeckillOrderArgs) GetReq() *seckill.ConfirmSeckillOrderReq {
	if !p.IsSetReq() {
		return ConfirmSeckillOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ConfirmSeckillOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ConfirmSeckillOrderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ConfirmSeckillOrderResult struct {
	Success *seckill.ConfirmSeckillOrderResp
}

var ConfirmSeckillOrderResult_Success_DEFAULT *seckill.ConfirmSeckillOrderResp

func (p *ConfirmSeckillOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(seckill.ConfirmSeckillOrderResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ConfirmSeckillOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ConfirmSeckillOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ConfirmSeckillOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ConfirmSeckillOrderResult) Unmarshal(in []byte) error {
	msg := new(seckill.ConfirmSeckillOrderResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ConfirmSeckillOrderResult) GetSuccess() *seckill.ConfirmSeckillOrderResp {
	if !p.IsSetSuccess() {
		return ConfirmSeckillOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ConfirmSeckillOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*seckill.ConfirmSeckillOrderResp)
}

func (p *ConfirmSeckillOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ConfirmSeckillOrderResult) GetResult() interface{} {
	return p.Success
}

func cancelSeckillHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(seckill.CancelSeckillReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(seckill.SeckillService).CancelSeckill(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CancelSeckillArgs:
		success, err := handler.(seckill.SeckillService).CancelSeckill(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CancelSeckillResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCancelSeckillArgs() interface{} {
	return &CancelSeckillArgs{}
}

func newCancelSeckillResult() interface{} {
	return &CancelSeckillResult{}
}

type CancelSeckillArgs struct {
	Req *seckill.CancelSeckillReq
}

func (p *CancelSeckillArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(seckill.CancelSeckillReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CancelSeckillArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CancelSeckillArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CancelSeckillArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CancelSeckillArgs) Unmarshal(in []byte) error {
	msg := new(seckill.CancelSeckillReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CancelSeckillArgs_Req_DEFAULT *seckill.CancelSeckillReq

func (p *CancelSeckillArgs) GetReq() *seckill.CancelSeckillReq {
	if !p.IsSetReq() {
		return CancelSeckillArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CancelSeckillArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CancelSeckillArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CancelSeckillResult struct {
	Success *seckill.CancelSeckillResp
}

var CancelSeckillResult_Success_DEFAULT *seckill.CancelSeckillResp

func (p *CancelSeckillResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(seckill.CancelSeckillResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CancelSeckillResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CancelSeckillResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CancelSeckillResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CancelSeckillResult) Unmarshal(in []byte) error {
	msg := new(seckill.CancelSeckillResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CancelSeckillResult) GetSuccess() *seckill.CancelSeckillResp {
	if !p.IsSetSuccess() {
		return CancelSeckillResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CancelSeckillResult) SetSuccess(x interface{}) {
	p.Success = x.(*seckill.CancelSeckillResp)
}

func (p *CancelSeckillResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CancelSeckillResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateSeckillProduct(ctx context.Context, Req *seckill.CreateSeckillProductReq) (r *seckill.CreateSeckillProductResp, err error) {
	var _args CreateSeckillProductArgs
	_args.Req = Req
	var _result CreateSeckillProductResult
	if err = p.c.Call(ctx, "CreateSeckillProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSeckillProduct(ctx context.Context, Req *seckill.GetSeckillProductReq) (r *seckill.GetSeckillProductResp, err error) {
	var _args GetSeckillProductArgs
	_args.Req = Req
	var _result GetSeckillProductResult
	if err = p.c.Call(ctx, "GetSeckillProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListActiveSeckillProducts(ctx context.Context, Req *seckill.ListActiveSeckillProductsReq) (r *seckill.ListActiveSeckillProductsResp, err error) {
	var _args ListActiveSeckillProductsArgs
	_args.Req = Req
	var _result ListActiveSeckillProductsResult
	if err = p.c.Call(ctx, "ListActiveSeckillProducts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DoSeckill(ctx context.Context, Req *seckill.DoSeckillReq) (r *seckill.DoSeckillResp, err error) {
	var _args DoSeckillArgs
	_args.Req = Req
	var _result DoSeckillResult
	if err = p.c.Call(ctx, "DoSeckill", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ConfirmSeckillOrder(ctx context.Context, Req *seckill.ConfirmSeckillOrderReq) (r *seckill.ConfirmSeckillOrderResp, err error) {
	var _args ConfirmSeckillOrderArgs
	_args.Req = Req
	var _result ConfirmSeckillOrderResult
	if err = p.c.Call(ctx, "ConfirmSeckillOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CancelSeckill(ctx context.Context, Req *seckill.CancelSeckillReq) (r *seckill.CancelSeckillResp, err error) {
	var _args CancelSeckillArgs
	_args.Req = Req
	var _result CancelSeckillResult
	if err = p.c.Call(ctx, "CancelSeckill", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
